Index: client/src/main/java/edu/unh/cs/cs619/bulletzone/ui/GridAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.unh.cs.cs619.bulletzone.ui;\r\n\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.BaseAdapter;\r\nimport android.widget.ImageView;\r\n\r\nimport org.androidannotations.annotations.EBean;\r\nimport org.androidannotations.annotations.SystemService;\r\n\r\nimport java.util.Random;\r\n\r\nimport edu.unh.cs.cs619.bulletzone.R;\r\n\r\n@EBean\r\npublic class GridAdapter extends BaseAdapter {\r\n\r\n    private final Object monitor = new Object();\r\n    @SystemService\r\n    protected LayoutInflater inflater;\r\n    private int[][] mEntities = new int[16][16];\r\n\r\n    private static final int[] ITEM_RESOURCES = {\r\n            R.drawable.applepowerupgrass,\r\n            R.drawable.nukepowerupgrass,\r\n            R.drawable.coingrass\r\n    };\r\n\r\n    public void updateList(int[][] entities) {\r\n        synchronized (monitor) {\r\n            this.mEntities = entities;\r\n            this.notifyDataSetChanged();\r\n        }\r\n    }\r\n\r\n    private int currentItemIndex = 0;\r\n\r\n    int tankRow;\r\n    int tankCol;\r\n\r\n    public int numCoins = 1000;\r\n    private static final String TAGFRIEND = \"GridAdapter (Friendly):\";\r\n    private static final String TAGENEMY = \"GridAdapter (Enemy):\";\r\n\r\n    @Override\r\n    public int getCount() {\r\n        return 16 * 16;\r\n    }\r\n\r\n    @Override\r\n    public Object getItem(int position) {\r\n        return mEntities[(int) position / 16][position % 16];\r\n    }\r\n\r\n    @Override\r\n    public long getItemId(int position) {\r\n        return position;\r\n    }\r\n\r\n    public int friendlyTank(int value) {\r\n        String tankID = Integer.toString(value);\r\n        tankID = tankID.substring(2, 4);\r\n        return Integer.parseInt(tankID);\r\n    }\r\n\r\n    int lastFriendlyDirection; // keeps record of last friendly direction\r\n    int lastEnemyDirection; // keeps record of last enemy direction\r\n    int numItems;\r\n    int numPlayers;\r\n    double chance;\r\n\r\n    private int[][] tankLocation = new int[16][16];\r\n\r\n    private int[][] hasPowerUp = new int[16][16];\r\n    // 0 grass, // 1 thingamajig //2 nuke //3 apple\r\n    //4 hill // 5 rocky // 6 forest // 7 soldier\r\n\r\n    public void setFriendlyTank(ImageView imageView, int direction, int val) {\r\n\r\n        lastFriendlyDirection = direction;\r\n        TerrainUI t = new TerrainUI();\r\n        t.friendlyTankImage(imageView, direction, val);\r\n    }\r\n\r\n    public void setEnemyTank(ImageView imageView, int direction, int val) {\r\n        lastEnemyDirection = direction;\r\n        TerrainUI t = new TerrainUI();\r\n        t.enemyTankImage(imageView, direction, val);\r\n    }\r\n\r\n    public void addSoldier(long soldierId) {\r\n        mEntities[tankRow + 1][tankCol] = (int) soldierId;\r\n        notifyDataSetChanged();\r\n    }\r\n\r\n    @Override\r\n    public View getView(int position, View convertView, ViewGroup parent) {\r\n        if (convertView == null) {\r\n            convertView = inflater.inflate(R.layout.field_item, null);\r\n        }\r\n\r\n        ImageView imageView = convertView.findViewById(R.id.imageView);\r\n\r\n        int row = position / 16;\r\n        int col = position % 16;\r\n\r\n        int val = mEntities[row][col];\r\n        int friendly;\r\n\r\n        synchronized (monitor) {\r\n            if(hasPowerUp[row][col] == 4) {\r\n                imageView.setImageResource(R.drawable.hillyterrain);\r\n            } else if(hasPowerUp[row][col] == 5) {\r\n                imageView.setImageResource(R.drawable.rockyterrain);\r\n            }\r\n            if (val > 0) {\r\n\r\n                int direction = (val % 10);\r\n                if (val == 1000 || (val > 1000 && val <= 2000)) {\r\n                    imageView.setImageResource(R.drawable.brick); // Set the appropriate image resource for walls\r\n                } else if (val >= 2000000 && val <= 3000000) {\r\n                    imageView.setImageResource(R.drawable.bulletgrass);\r\n                    if (hasPowerUp[row][col] == 1 || hasPowerUp[row][col] == 2 || hasPowerUp[row][col] == 3) {\r\n                        //NEED TO SET THE TANK TO MARK THAT IT HAS A POWERUP\r\n                        hasPowerUp[row][col] = 0;\r\n                        numItems--;\r\n                    }\r\n                } else if (val >= 10000000 && val <= 20000000) {\r\n\r\n                    if (hasPowerUp[row][col] == 1 || hasPowerUp[row][col] == 2 || hasPowerUp[row][col] == 3) {\r\n                        //NEED TO SET THE TANK TO MARK THAT IT HAS A POWERUP\r\n                        hasPowerUp[row][col] = 0;\r\n                        numItems--;\r\n                    }\r\n                    numPlayers++;\r\n                    if (friendlyTank(val) == 0) {\r\n                        setFriendlyTank(imageView, direction, hasPowerUp[row][col]); // Set proper friendly tank image\r\n                    } else {\r\n                        tankRow = row;\r\n                        tankCol = col;\r\n                        setEnemyTank(imageView, direction, hasPowerUp[row][col]); // Set proper enemy tank image\r\n                    }\r\n                } else if (val >= 40000000 && val <= 50000000) {\r\n                    if (direction == 0) {\r\n                        // Check if cell above is tank\r\n                        imageView.setImageResource(R.drawable.soldiergrassup);\r\n                    } else if (direction == 2) {\r\n                        // Check if cell above is tank\r\n                        imageView.setImageResource(R.drawable.soldiergrassright);\r\n                    } else if (direction == 4) {\r\n                        // Check if cell above is tank\r\n                        imageView.setImageResource(R.drawable.soldiergrassdown);\r\n                    } else if (direction == 6) {\r\n                        // Check if cell above is tank\r\n                        imageView.setImageResource(R.drawable.soldiergrassleft);\r\n                    }\r\n                } else if (val == 7) {\r\n                    hasPowerUp[row][col] = 1;\r\n                    numItems++;\r\n                    imageView.setImageResource(R.drawable.coingrass);\r\n                } else if (val == 2002) {\r\n                    hasPowerUp[row][col] = 2;\r\n                    numItems++;\r\n                    imageView.setImageResource(R.drawable.nukepowerupgrass);\r\n                } else if (val == 2003) {\r\n                    hasPowerUp[row][col] = 3;\r\n                    numItems++;\r\n                    imageView.setImageResource(R.drawable.applepowerupgrass);\r\n                } else if (val == 2) {\r\n                    hasPowerUp[row][col] = 4;\r\n                    imageView.setImageResource(R.drawable.hillyterrain);\r\n                } else if (val == 1) {\r\n                    hasPowerUp[row][col] = 5;\r\n                    imageView.setImageResource(R.drawable.rockyterrain);\r\n                } else if (val == 3) {\r\n                    hasPowerUp[row][col] = 6;\r\n                    imageView.setImageResource(R.drawable.forestterrain);\r\n                }\r\n            } else {\r\n\r\n                if (hasPowerUp[row][col] != 0) {\r\n                    if (hasPowerUp[row][col] == 1) {\r\n                        numItems++;\r\n                        imageView.setImageResource(R.drawable.coingrass);\r\n                    } else if (hasPowerUp[row][col] == 2) {\r\n                        numItems++;\r\n                        imageView.setImageResource(R.drawable.nukepowerupgrass);\r\n                    } else if (hasPowerUp[row][col] == 3) {\r\n                        numItems++;\r\n                        imageView.setImageResource(R.drawable.applepowerupgrass);\r\n                    }\r\n\r\n                } else {\r\n                    if(0.25 * (numPlayers / (numItems + 1)) > 0) {\r\n                        // Determine whether to place a power-up\r\n                        if (shouldPlacePowerUp()) {\r\n                            int appear = new Random().nextInt(3);\r\n                            hasPowerUp[row][col] = appear + 1;\r\n                            numItems++;\r\n                            setImageForPowerUp(imageView, hasPowerUp[row][col]);\r\n                        } //else {\r\n                        //imageView.setImageResource(R.drawable.grass);\r\n                        //}\r\n                    } else {\r\n\r\n                        imageView.setImageResource(R.drawable.grass);\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        return imageView;\r\n    }\r\n\r\n    private boolean shouldPlacePowerUp() {\r\n        int randNum = new Random().nextInt(101);\r\n        return randNum <= (chance * 100);\r\n    }\r\n\r\n    // Set the image for the power-up based on its type\r\n    private void setImageForPowerUp(ImageView imageView, int powerUpType) {\r\n        switch (powerUpType) {\r\n            case 1:\r\n                imageView.setImageResource(R.drawable.coingrass);\r\n                break;\r\n            case 2:\r\n                imageView.setImageResource(R.drawable.nukepowerupgrass);\r\n                break;\r\n            case 3:\r\n                imageView.setImageResource(R.drawable.applepowerupgrass);\r\n                break;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/main/java/edu/unh/cs/cs619/bulletzone/ui/GridAdapter.java b/client/src/main/java/edu/unh/cs/cs619/bulletzone/ui/GridAdapter.java
--- a/client/src/main/java/edu/unh/cs/cs619/bulletzone/ui/GridAdapter.java	(revision c3706688914e5f5c4304d8969304341770b4e6f9)
+++ b/client/src/main/java/edu/unh/cs/cs619/bulletzone/ui/GridAdapter.java	(date 1700235719048)
@@ -1,5 +1,6 @@
 package edu.unh.cs.cs619.bulletzone.ui;
 
+import android.os.Handler;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -8,10 +9,12 @@
 
 import org.androidannotations.annotations.EBean;
 import org.androidannotations.annotations.SystemService;
+import org.androidannotations.rest.spring.annotations.RestService;
 
 import java.util.Random;
 
 import edu.unh.cs.cs619.bulletzone.R;
+import edu.unh.cs.cs619.bulletzone.rest.BulletZoneRestClient;
 
 @EBean
 public class GridAdapter extends BaseAdapter {
@@ -19,8 +22,23 @@
     private final Object monitor = new Object();
     @SystemService
     protected LayoutInflater inflater;
+
+
+
+    @RestService
+    BulletZoneRestClient restClient;
     private int[][] mEntities = new int[16][16];
 
+    public interface BalanceModificationListener {
+        void onBalanceModified();
+    }
+
+    private BalanceModificationListener balanceModificationListener;
+
+    public void setBalanceModificationListener(BalanceModificationListener listener) {
+        this.balanceModificationListener = listener;
+    }
+
     private static final int[] ITEM_RESOURCES = {
             R.drawable.applepowerupgrass,
             R.drawable.nukepowerupgrass,
@@ -34,12 +52,22 @@
         }
     }
 
+    public int[][] getHasPowerUp() {
+        return hasPowerUp;
+    }
+    private long tankId;
+    public void setTankId(long tankId) {
+        this.tankId = tankId;
+    }
+
+
     private int currentItemIndex = 0;
 
     int tankRow;
     int tankCol;
 
     public int numCoins = 1000;
+    Handler handler = new Handler();
     private static final String TAGFRIEND = "GridAdapter (Friendly):";
     private static final String TAGENEMY = "GridAdapter (Enemy):";
 
@@ -94,6 +122,8 @@
         notifyDataSetChanged();
     }
 
+
+
     @Override
     public View getView(int position, View convertView, ViewGroup parent) {
         if (convertView == null) {
@@ -123,6 +153,7 @@
                     imageView.setImageResource(R.drawable.bulletgrass);
                     if (hasPowerUp[row][col] == 1 || hasPowerUp[row][col] == 2 || hasPowerUp[row][col] == 3) {
                         //NEED TO SET THE TANK TO MARK THAT IT HAS A POWERUP
+                        restClient.setTankPowerup(tankId, hasPowerUp[row][col]);
                         hasPowerUp[row][col] = 0;
                         numItems--;
                     }
@@ -130,6 +161,13 @@
 
                     if (hasPowerUp[row][col] == 1 || hasPowerUp[row][col] == 2 || hasPowerUp[row][col] == 3) {
                         //NEED TO SET THE TANK TO MARK THAT IT HAS A POWERUP
+
+                        if(hasPowerUp[row][col] == 1) {
+                            if (balanceModificationListener != null) {
+                                balanceModificationListener.onBalanceModified();
+                            }
+                        }
+
                         hasPowerUp[row][col] = 0;
                         numItems--;
                     }
Index: server/src/main/java/edu/unh/cs/cs619/bulletzone/model/Tank.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.unh.cs.cs619.bulletzone.model;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonIgnore;\r\n\r\npublic class Tank extends FieldEntity {\r\n\r\n    private static final String TAG = \"Tank\";\r\n\r\n    private final long id;\r\n\r\n    private final String ip;\r\n\r\n    private long lastMoveTime;\r\n    private int allowedMoveInterval;\r\n\r\n    private long lastFireTime;\r\n    private int allowedFireInterval;\r\n\r\n    private int numberOfBullets;\r\n    private int allowedNumberOfBullets;\r\n\r\n    private int life;\r\n\r\n    private Direction direction;\r\n\r\n    private int isActive;\r\n\r\n\r\n    public Tank(long id, Direction direction, String ip, int isActive) {\r\n        this.id = id;\r\n        this.direction = direction;\r\n        this.ip = ip;\r\n        this.isActive = isActive;\r\n        numberOfBullets = 0;\r\n        allowedNumberOfBullets = 2;\r\n        lastFireTime = 0;\r\n        allowedFireInterval = 1500;\r\n        lastMoveTime = 0;\r\n        allowedMoveInterval = 500;\r\n    }\r\n\r\n    @Override\r\n    public FieldEntity copy() {\r\n        return new Tank(id, direction, ip, isActive);\r\n    }\r\n\r\n    /**\r\n    public interface OnLifeChangeListener {\r\n        void onLifeChanged(int newLife);\r\n    }\r\n     */\r\n\r\n    /**\r\n    public void setOnLifeChangeListener(OnLifeChangeListener listener) {\r\n        this.onLifeChangeListener = listener;\r\n    }\r\n     */\r\n\r\n    @Override\r\n    public void hit(int damage) {\r\n        life = life - damage;\r\n        System.out.println(\"Tank life: \" + id + \" : \" + life);\r\n//\t\tLog.d(TAG, \"TankId: \" + id + \" hit -> life: \" + life);\r\n\r\n        if (life <= 0) {\r\n//\t\t\tLog.d(TAG, \"Tank event\");\r\n            //eventBus.post(Tank.this);\r\n            //eventBus.post(new Object());\r\n        }\r\n    }\r\n\r\n\r\n    public long getLastMoveTime() {\r\n        return lastMoveTime;\r\n    }\r\n\r\n    public void setLastMoveTime(long lastMoveTime) {\r\n        this.lastMoveTime = lastMoveTime;\r\n    }\r\n\r\n    public long getAllowedMoveInterval() {\r\n        return allowedMoveInterval;\r\n    }\r\n\r\n    public void setAllowedMoveInterval(int allowedMoveInterval) {\r\n        this.allowedMoveInterval = allowedMoveInterval;\r\n    }\r\n\r\n    public long getLastFireTime() {\r\n        return lastFireTime;\r\n    }\r\n\r\n    public void setLastFireTime(long lastFireTime) {\r\n        this.lastFireTime = lastFireTime;\r\n    }\r\n\r\n    public long getAllowedFireInterval() {\r\n        return allowedFireInterval;\r\n    }\r\n\r\n    public void setAllowedFireInterval(int allowedFireInterval) {\r\n        this.allowedFireInterval = allowedFireInterval;\r\n    }\r\n\r\n    public int getNumberOfBullets() {\r\n        return numberOfBullets;\r\n    }\r\n\r\n    public void setNumberOfBullets(int numberOfBullets) {\r\n        this.numberOfBullets = numberOfBullets;\r\n    }\r\n\r\n    public int getAllowedNumberOfBullets() {\r\n        return allowedNumberOfBullets;\r\n    }\r\n\r\n    public void setAllowedNumberOfBullets(int allowedNumberOfBullets) {\r\n        this.allowedNumberOfBullets = allowedNumberOfBullets;\r\n    }\r\n\r\n    public Direction getDirection() {\r\n        return direction;\r\n    }\r\n\r\n    public void setDirection(Direction direction) {\r\n        this.direction = direction;\r\n    }\r\n\r\n    @JsonIgnore\r\n    public long getId() {\r\n        return id;\r\n    }\r\n\r\n    @Override\r\n    public int getIntValue() {\r\n        return (int) (10000000 + 10000 * id + 10 * life + Direction\r\n                .toByte(direction));\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"T\";\r\n    }\r\n\r\n    public int getLife() {\r\n        return life;\r\n    }\r\n\r\n    public void setLife(int life) {\r\n        this.life = life;\r\n    }\r\n\r\n    public String getIp(){\r\n        return ip;\r\n    }\r\n\r\n    public int getIsActive() {\r\n        return isActive;\r\n    }\r\n\r\n    public void setIsActive(int isActive) {\r\n        this.isActive = isActive;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/edu/unh/cs/cs619/bulletzone/model/Tank.java b/server/src/main/java/edu/unh/cs/cs619/bulletzone/model/Tank.java
--- a/server/src/main/java/edu/unh/cs/cs619/bulletzone/model/Tank.java	(revision c3706688914e5f5c4304d8969304341770b4e6f9)
+++ b/server/src/main/java/edu/unh/cs/cs619/bulletzone/model/Tank.java	(date 1700105421108)
@@ -25,12 +25,15 @@
 
     private int isActive;
 
+    private int powerUpType;
+
 
     public Tank(long id, Direction direction, String ip, int isActive) {
         this.id = id;
         this.direction = direction;
         this.ip = ip;
         this.isActive = isActive;
+        this.powerUpType = 0;
         numberOfBullets = 0;
         allowedNumberOfBullets = 2;
         lastFireTime = 0;
@@ -74,6 +77,15 @@
         return lastMoveTime;
     }
 
+    public boolean allowedToMove(long currentTime) {
+        if (powerUpType == 4) {
+
+            return currentTime - lastMoveTime >= 1.5 * allowedMoveInterval;
+        } else {
+            return currentTime - lastMoveTime >= allowedMoveInterval;
+        }
+    }
+
     public void setLastMoveTime(long lastMoveTime) {
         this.lastMoveTime = lastMoveTime;
     }
@@ -106,6 +118,13 @@
         return numberOfBullets;
     }
 
+    public int getPowerUpType() {
+        return powerUpType;
+    }
+    public void setPowerUpType(int type) {
+        powerUpType = type;
+    }
+
     public void setNumberOfBullets(int numberOfBullets) {
         this.numberOfBullets = numberOfBullets;
     }
Index: client/src/main/java/edu/unh/cs/cs619/bulletzone/ClientActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.unh.cs.cs619.bulletzone;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.hardware.Sensor;\r\nimport android.content.Intent;\r\nimport android.hardware.SensorManager;\r\nimport android.os.Bundle;\r\nimport android.os.SystemClock;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.GridView;\r\nimport android.content.Context;\r\nimport android.hardware.Sensor;\r\nimport android.hardware.SensorManager;\r\nimport android.widget.ImageButton;\r\nimport android.widget.RadioButton;\r\nimport android.widget.RadioGroup;\r\nimport android.widget.SeekBar;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.squareup.otto.Subscribe;\r\n\r\n\r\nimport androidx.appcompat.app.AlertDialog;\r\n\r\nimport com.squareup.otto.Subscribe;\r\n\r\nimport org.androidannotations.annotations.AfterInject;\r\nimport org.androidannotations.annotations.AfterViews;\r\nimport org.androidannotations.annotations.Background;\r\nimport org.androidannotations.annotations.Bean;\r\nimport org.androidannotations.annotations.Click;\r\nimport org.androidannotations.annotations.EActivity;\r\nimport org.androidannotations.annotations.NonConfigurationInstance;\r\nimport org.androidannotations.annotations.UiThread;\r\nimport org.androidannotations.annotations.ViewById;\r\nimport org.androidannotations.api.BackgroundExecutor;\r\nimport org.androidannotations.rest.spring.annotations.RestService;\r\n\r\nimport java.util.Timer;\r\nimport java.util.TimerTask;\r\n\r\nimport edu.unh.cs.cs619.bulletzone.events.BusProvider;\r\nimport edu.unh.cs.cs619.bulletzone.events.ShakeDetector;\r\nimport edu.unh.cs.cs619.bulletzone.rest.BZRestErrorhandler;\r\nimport edu.unh.cs.cs619.bulletzone.rest.BulletZoneRestClient;\r\nimport edu.unh.cs.cs619.bulletzone.rest.GridPollerTask;\r\nimport edu.unh.cs.cs619.bulletzone.rest.GridUpdateEvent;\r\nimport edu.unh.cs.cs619.bulletzone.ui.GridAdapter;\r\nimport edu.unh.cs.cs619.bulletzone.util.GridWrapper;\r\nimport edu.unh.cs.cs619.bulletzone.events.ShakeDetector;\r\nimport edu.unh.cs.cs619.bulletzone.util.LongWrapper;\r\nimport edu.unh.cs.cs619.bulletzone.util.LongWrapper;\r\n\r\n\r\n@EActivity(R.layout.activity_client)\r\npublic class ClientActivity extends Activity {\r\n\r\n    private static final String TAG = \"ClientActivity\";\r\n\r\n    @Bean\r\n    protected GridAdapter mGridAdapter;\r\n\r\n    private Timer healthUpdateTimer;\r\n\r\n    @ViewById\r\n    protected GridView gridView;\r\n    @ViewById(R.id.radioGroup)\r\n    RadioGroup radioGroup;\r\n\r\n    @ViewById(R.id.submitButton)\r\n    Button submitButton;\r\n\r\n    @Bean\r\n    BusProvider busProvider;\r\n\r\n    @NonConfigurationInstance\r\n    @Bean\r\n    GridPollerTask gridPollTask;\r\n\r\n    EditText editDirection;\r\n\r\n    @RestService\r\n    BulletZoneRestClient restClient;\r\n\r\n    @Bean\r\n    BZRestErrorhandler bzRestErrorhandler;\r\n\r\n    byte previousDirection;\r\n    byte tempDirection;\r\n\r\n    /**\r\n     * Remote tank identifier\r\n     */\r\n    private long tankId = -1;\r\n\r\n    private long soldierId = -1;\r\n    private SensorManager sensorManager;\r\n    private Sensor mAccelerometer;\r\n\r\n     ShakeDetector mShakeDetector;\r\n    @ViewById(R.id.bank_balance)\r\n    TextView bankBalanceTextView;\r\n     private int tankIsActive;\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        // Establish shake/sensorManager. Will handle shakes.\r\n        sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);\r\n        mAccelerometer = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);\r\n        mShakeDetector = new ShakeDetector();\r\n        mShakeDetector.setOnShakeListener(new ShakeDetector.OnShakeListener() {\r\n\r\n            @Override\r\n            public void onShake() {\r\n                Log.d(TAG, \"Shake initiated, firing bullet\");\r\n                onButtonFire();\r\n            }\r\n        });\r\n        sensorManager.registerListener(mShakeDetector, mAccelerometer,\tSensorManager.SENSOR_DELAY_UI);\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        busProvider.getEventBus().unregister(gridEventHandler);\r\n        sensorManager.unregisterListener(mShakeDetector);\r\n        stopHealthUpdateTimer();\r\n    }\r\n\r\n    /**\r\n     * Otto has a limitation (as per design) that it will only find\r\n     * methods on the immediate class type. As a result, if at runtime this instance\r\n     * actually points to a subclass implementation, the methods registered in this class will\r\n     * not be found. This immediately becomes a problem when using the AndroidAnnotations\r\n     * framework as it always produces a subclass of annotated classes.\r\n     *\r\n     * To get around the class hierarchy limitation, one can use a separate anonymous class to\r\n     * handle the events.\r\n     */\r\n    private GridWrapper currentGridWrapper;\r\n    private Object gridEventHandler = new Object()\r\n    {\r\n        @Subscribe\r\n        public void onUpdateGrid(GridUpdateEvent event) {\r\n            if (event.gw != null) {\r\n                currentGridWrapper = event.gw;\r\n                updateGrid(event.gw);\r\n            }\r\n        }\r\n\r\n        public GridWrapper getCurrentGridWrapper() {\r\n            return currentGridWrapper;\r\n        }\r\n    };\r\n\r\n\r\n    @AfterViews\r\n    protected void afterViewInjection() {\r\n        joinAsync();\r\n        SystemClock.sleep(500);\r\n        gridView.setAdapter(mGridAdapter);\r\n\r\n        submitButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                int selectedRadioButtonId = radioGroup.getCheckedRadioButtonId();\r\n\r\n                if (selectedRadioButtonId != -1) {\r\n                    RadioButton selectedRadioButton = findViewById(selectedRadioButtonId);\r\n                    String selectedOption = selectedRadioButton.getText().toString();\r\n\r\n                    // Now you can do something with the selected option\r\n                    // For example, you can pass it to another activity or perform some action\r\n                    // You may use Intent to pass data to another activity, or call a method, etc.\r\n                } else {\r\n                    // No option selected, handle this case if needed\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    @AfterInject\r\n    void afterInject() {\r\n        restClient.setRestErrorHandler(bzRestErrorhandler);\r\n        busProvider.getEventBus().register(gridEventHandler);\r\n        startHealthUpdateTimer();\r\n    }\r\n\r\n    private void startHealthUpdateTimer() {\r\n        healthUpdateTimer = new Timer();\r\n        healthUpdateTimer.scheduleAtFixedRate(new TimerTask() {\r\n            @Override\r\n            public void run() {\r\n                // Call the method to update health information\r\n                updateHealthAsync(tankId);\r\n            }\r\n        }, 0, 1000); // Update health every 5 seconds (adjust the interval as needed)\r\n    }\r\n\r\n    private void stopHealthUpdateTimer() {\r\n        if (healthUpdateTimer != null) {\r\n            healthUpdateTimer.cancel();\r\n            healthUpdateTimer = null;\r\n        }\r\n    }\r\n    @Background\r\n    void joinAsync() {\r\n        try {\r\n            tankId = restClient.join().getResult();\r\n            gridPollTask.doPoll();\r\n            tankIsActive = 1;\r\n            updateHealthAsync(tankId);\r\n        } catch (Exception e) {\r\n            System.out.println(\"ERROR: joining game\");\r\n        }\r\n    }\r\n    public void updateBankBalanceText(int numCoins) {\r\n        bankBalanceTextView.setText(String.valueOf(numCoins));\r\n    }\r\n\r\n    public void updateGrid(GridWrapper gw) {\r\n        if (gw != null) {\r\n            mGridAdapter.updateList(gw.getGrid());\r\n            updateBankBalanceText(mGridAdapter.numCoins);\r\n        } else {\r\n            Log.e(TAG, \"GridWrapper is null\");\r\n        }\r\n    }\r\n\r\n    @Click({R.id.buttonUp, R.id.buttonDown, R.id.buttonLeft, R.id.buttonRight})\r\n    protected void onButtonMove(View view) {\r\n        final int viewId = view.getId();\r\n        byte direction = 0;\r\n        final Object lock = new Object();\r\n\r\n        switch (viewId) {\r\n            case R.id.buttonUp:\r\n                direction = 0;\r\n                tempDirection = 0;\r\n            //    tankId = 0;\r\n                break;\r\n            case R.id.buttonDown:\r\n                direction = 4;\r\n                tempDirection = 4;\r\n             //   tankId = 4;\r\n                break;\r\n            case R.id.buttonLeft:\r\n                direction = 6;\r\n                tempDirection = 6;\r\n             //   tankId = 6;\r\n                break;\r\n            case R.id.buttonRight:\r\n                direction = 2;\r\n                tempDirection = 2;\r\n               // tankId = 2;\r\n                break;\r\n            default:\r\n                Log.e(TAG, \"Unknown movement button id: \" + viewId);\r\n                break;\r\n        }\r\n        if (tankIsActive == 1) {\r\n            if (previousDirection == direction) {\r\n                previousDirection = tempDirection;\r\n                this.moveAsync(tankId, direction);\r\n            } else {\r\n                if (previousDirection == 2 && direction == 6) {\r\n                    previousDirection = tempDirection;\r\n                    this.moveAsync(tankId, direction);\r\n                } else if (previousDirection == 6 && direction == 2) {\r\n                    previousDirection = tempDirection;\r\n                    this.moveAsync(tankId, direction);\r\n                } else if (previousDirection == 0 && direction == 4) {\r\n                    previousDirection = tempDirection;\r\n                    this.moveAsync(tankId, direction);\r\n                } else if (previousDirection == 4 && direction == 0) {\r\n                    previousDirection = tempDirection;\r\n                    this.moveAsync(tankId, direction);\r\n                } else {\r\n                    previousDirection = tempDirection;\r\n                    this.turnAsync(tankId, direction);\r\n                }\r\n            }\r\n        } else {\r\n            if (previousDirection == direction) {\r\n                previousDirection = tempDirection;\r\n                this.moveAsync(soldierId, direction);\r\n            } else {\r\n                if (previousDirection == 2 && direction == 6) {\r\n                    previousDirection = tempDirection;\r\n                    this.moveAsync(soldierId, direction);\r\n                } else if (previousDirection == 6 && direction == 2) {\r\n                    previousDirection = tempDirection;\r\n                    this.moveAsync(soldierId, direction);\r\n                } else if (previousDirection == 0 && direction == 4) {\r\n                    previousDirection = tempDirection;\r\n                    this.moveAsync(soldierId, direction);\r\n                } else if (previousDirection == 4 && direction == 0) {\r\n                    previousDirection = tempDirection;\r\n                    this.moveAsync(soldierId, direction);\r\n                } else {\r\n                    previousDirection = tempDirection;\r\n                    this.turnAsync(soldierId, direction);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    @Background\r\n    void moveAsync(long tankId, byte direction) {\r\n        restClient.move(tankId, direction);\r\n\r\n    }\r\n\r\n    @Background\r\n    void turnAsync(long tankId, byte direction) {\r\n        restClient.turn(tankId, direction);\r\n    }\r\n\r\n    @Click(R.id.deploySoldier)\r\n    @Background\r\n    protected void deploySoldier() {\r\n        tankIsActive = 0;\r\n        deploySoldierAsync();\r\n    }\r\n    private boolean isSoldierDeployed = false;\r\n\r\n    protected void deploySoldierAsync() {\r\n        try {\r\n            //if (!isSoldierDeployed) {\r\n                // Attempt to deploy a soldier\r\n                LongWrapper soldierWrapper = restClient.deploySoldier(tankId);\r\n\r\n                if (soldierWrapper != null) {\r\n                    // Deployment successful\r\n                    soldierId = soldierWrapper.getResult();\r\n                    isSoldierDeployed = true;\r\n\r\n                    Log.d(TAG, \"SoldierID is \" + soldierId);\r\n                    // Other deployment-related logic...\r\n                } else {\r\n                    Log.d(TAG, \"SoldierID is NULL.\\n\");\r\n                    // Handle other HTTP status codes if needed\r\n                }\r\n                /**\r\n            } else {\r\n                Log.d(TAG, \"Soldier already deployed. Cannot deploy another.\");\r\n                // Notify the user or handle accordingly\r\n            }\r\n                 */\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    // Method to reset soldier status after reentry\r\n    private void resetSoldierStatus() {\r\n        isSoldierDeployed = false;\r\n    }\r\n\r\n    @Click(R.id.buttonFire)\r\n    @Background\r\n    protected void onButtonFire() {\r\n        restClient.fire(tankId);\r\n    }\r\n\r\n    @Click(R.id.buttonReplay)\r\n    @Background\r\n    void replayButton() {\r\n        Intent intent = new Intent(this, ReplayActivity.class);\r\n        startActivity(intent);\r\n    }\r\n\r\n    @Click(R.id.buttonLeave)\r\n    @Background\r\n    void leaveGame() {\r\n        showConfirmationDialog();\r\n    }\r\n\r\n    public void performLeave() {\r\n        System.out.println(\"leaveGame() called, tank ID: \"+tankId);\r\n        BackgroundExecutor.cancelAll(\"grid_poller_task\", true);\r\n        restClient.leave(tankId);\r\n    }\r\n\r\n    @UiThread\r\n    public void showConfirmationDialog() {\r\n        new AlertDialog.Builder(this)\r\n                .setTitle(\"Confirmation\")\r\n                .setMessage(\"Are you sure you want to quit BulletZone?\")\r\n                .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        // User clicked Yes, proceed with leave action\r\n                        performLeave();\r\n                    }\r\n                })\r\n                .setNegativeButton(android.R.string.no, null)\r\n                .setIcon(android.R.drawable.ic_dialog_alert)\r\n                .show();\r\n    }\r\n\r\n\r\n    @Click(R.id.buttonMoveCustom)\r\n    protected void onSelectCellClick() {\r\n        // Display a message or perform any other actions to indicate\r\n        // that the user should now select a cell on the grid.\r\n        Toast.makeText(this, \"Select a cell on the grid\", Toast.LENGTH_SHORT).show();\r\n\r\n        // Enable the grid or provide visual cues to indicate that cell selection is active.\r\n        // For example, change the background color of the selected cell when clicked.\r\n\r\n        // Add a click listener to the grid cells to handle the cell selection.\r\n        gridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\r\n            @Override\r\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\r\n                // Handle the selected cell position\r\n                handleCellSelection(position);\r\n\r\n                // Optionally, reset the grid item click listener after a cell is selected.\r\n                gridView.setOnItemClickListener(null);\r\n            }\r\n        });\r\n    }\r\n    private void handleCellSelection(int selectedPosition) {\r\n        // Perform actions based on the selected cell position.\r\n        // For example, move the tank to the selected cell.\r\n        //moveAsync(tankId, (byte) selectedPosition);\r\n\r\n        // Inform the user or update UI as needed.\r\n        Toast.makeText(this, \"Moving to cell: \" + selectedPosition, Toast.LENGTH_SHORT).show();\r\n    }\r\n\r\n    @UiThread\r\n    public void updateTankHealth(int health) {\r\n        TextView tankHealthTextView = findViewById(R.id.tankHealth);\r\n        tankHealthTextView.setText(\"\" + health);\r\n    }\r\n\r\n//    @Subscribe\r\n//    public void onUpdateHealth(GridUpdateEvent event) {\r\n//        updateTankHealth(event.getHealth());\r\n//    }\r\n\r\n    @Background\r\n    void updateHealthAsync(long tankId) {\r\n        try {\r\n            // Call your restClient method to get the tank's health\r\n            LongWrapper healthWrapper = restClient.getHealth(tankId);\r\n\r\n            if (healthWrapper != null) {\r\n                // Only update the health if it's not null\r\n                Log.e(TAG, \"HealthWrapper value: \" + healthWrapper.getResult());\r\n                long health = healthWrapper.getResult();\r\n                updateTankHealth((int) health);\r\n                Log.e(TAG, \"Received health from restClient.getHealth: \" + health);\r\n            } else {\r\n                Log.e(TAG, \"Received null health from restClient.getHealth for tankId: \" + tankId);\r\n            }\r\n        } catch (Exception e) {\r\n            // Handle the exception\r\n            Log.e(TAG, \"Error updating tank health\", e);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n    @Click(R.id.buttonLogin)\r\n    void login() {\r\n        Intent intent = new Intent(this, AuthenticateActivity_.class);\r\n        startActivity(intent);\r\n    }\r\n**/\r\n\r\n    @Background\r\n    void leaveAsync(long tankId) {\r\n        System.out.println(\"Leave called, tank ID: \" + tankId);\r\n        BackgroundExecutor.cancelAll(\"grid_poller_task\", true);\r\n        restClient.leave(tankId);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/main/java/edu/unh/cs/cs619/bulletzone/ClientActivity.java b/client/src/main/java/edu/unh/cs/cs619/bulletzone/ClientActivity.java
--- a/client/src/main/java/edu/unh/cs/cs619/bulletzone/ClientActivity.java	(revision c3706688914e5f5c4304d8969304341770b4e6f9)
+++ b/client/src/main/java/edu/unh/cs/cs619/bulletzone/ClientActivity.java	(date 1700237991045)
@@ -42,6 +42,7 @@
 import org.androidannotations.annotations.ViewById;
 import org.androidannotations.api.BackgroundExecutor;
 import org.androidannotations.rest.spring.annotations.RestService;
+import org.springframework.http.ResponseEntity;
 
 import java.util.Timer;
 import java.util.TimerTask;
@@ -53,6 +54,7 @@
 import edu.unh.cs.cs619.bulletzone.rest.GridPollerTask;
 import edu.unh.cs.cs619.bulletzone.rest.GridUpdateEvent;
 import edu.unh.cs.cs619.bulletzone.ui.GridAdapter;
+import edu.unh.cs.cs619.bulletzone.util.BooleanWrapper;
 import edu.unh.cs.cs619.bulletzone.util.GridWrapper;
 import edu.unh.cs.cs619.bulletzone.events.ShakeDetector;
 import edu.unh.cs.cs619.bulletzone.util.LongWrapper;
@@ -95,11 +97,14 @@
     byte previousDirection;
     byte tempDirection;
 
+    int[][] hasPowerup;
+
     /**
      * Remote tank identifier
      */
     private long tankId = -1;
 
+    private long userId = -1;
     private long soldierId = -1;
     private SensorManager sensorManager;
     private Sensor mAccelerometer;
@@ -170,6 +175,8 @@
         SystemClock.sleep(500);
         gridView.setAdapter(mGridAdapter);
 
+        mGridAdapter.setTankId(tankId);
+
         submitButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
@@ -196,6 +203,29 @@
         startHealthUpdateTimer();
     }
 
+
+
+    @UiThread
+    void updateBalanceUI(LongWrapper balanceWrapper) {
+        if (balanceWrapper != null) {
+            long balance = balanceWrapper.getResult();
+            updateBankBalanceText((int) balance);
+        } else {
+            Log.e(TAG, "Error: Received null balance from restClient.getBalance");
+        }
+    }
+
+    @UiThread
+    void updateHealthUI(LongWrapper healthWrapper) {
+        if (healthWrapper != null) {
+            long health = healthWrapper.getResult();
+            updateTankHealth((int) health);
+        } else {
+            Log.e(TAG, "Error: Received null health from restClient.getHealth");
+        }
+    }
+
+
     private void startHealthUpdateTimer() {
         healthUpdateTimer = new Timer();
         healthUpdateTimer.scheduleAtFixedRate(new TimerTask() {
@@ -204,7 +234,16 @@
                 // Call the method to update health information
                 updateHealthAsync(tankId);
             }
-        }, 0, 1000); // Update health every 5 seconds (adjust the interval as needed)
+        }, 0, 1000);
+
+        Timer balanceUpdateTimer = new Timer();
+        balanceUpdateTimer.scheduleAtFixedRate(new TimerTask() {
+            @Override
+            public void run() {
+
+                updateBalanceAsync(tankId);
+            }
+        }, 0, 5000);
     }
 
     private void stopHealthUpdateTimer() {
@@ -217,6 +256,7 @@
     void joinAsync() {
         try {
             tankId = restClient.join().getResult();
+            userId = restClient.join().getResult();
             gridPollTask.doPoll();
             tankIsActive = 1;
             updateHealthAsync(tankId);
@@ -224,6 +264,9 @@
             System.out.println("ERROR: joining game");
         }
     }
+
+
+
     public void updateBankBalanceText(int numCoins) {
         bankBalanceTextView.setText(String.valueOf(numCoins));
     }
@@ -319,7 +362,7 @@
     @Background
     void moveAsync(long tankId, byte direction) {
         restClient.move(tankId, direction);
-
+        //hasPowerup = mGridAdapter.getHasPowerUp();
     }
 
     @Background
@@ -327,6 +370,17 @@
         restClient.turn(tankId, direction);
     }
 
+    private void checkAndModifyBalance(int[][] hasPowerUp, int row, int col) {
+        if (hasPowerUp[row][col] == 1) {
+            // Execute balance modification on the UI thread
+                    restClient.modifyBalance(tankId, 100);
+                    // Optionally, update other UI components or variables
+                    // hasPowerUp[row][col] = 0;
+                    // numItems--;
+                    // notifyDataSetChanged();
+        }
+    }
+
     @Click(R.id.deploySoldier)
     @Background
     protected void deploySoldier() {
@@ -412,25 +466,40 @@
 
     @Click(R.id.buttonMoveCustom)
     protected void onSelectCellClick() {
-        // Display a message or perform any other actions to indicate
-        // that the user should now select a cell on the grid.
         Toast.makeText(this, "Select a cell on the grid", Toast.LENGTH_SHORT).show();
-
-        // Enable the grid or provide visual cues to indicate that cell selection is active.
-        // For example, change the background color of the selected cell when clicked.
-
-        // Add a click listener to the grid cells to handle the cell selection.
         gridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
             @Override
             public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-                // Handle the selected cell position
                 handleCellSelection(position);
-
-                // Optionally, reset the grid item click listener after a cell is selected.
                 gridView.setOnItemClickListener(null);
             }
         });
     }
+
+    @Background
+    void updateBalanceAsync(long tankId) {
+        try {
+            // Call your restClient method to update the balance
+            BooleanWrapper response = restClient.modifyBalance(1, 0);
+            LongWrapper balanceResponse = restClient.getBalance(1);
+
+            Log.e(TAG, "userId: " + userId);
+            if (balanceResponse != null) {
+                long longWrapper = balanceResponse.getResult();
+
+
+                // Update the UI with the balance
+                updateBalanceUI(balanceResponse);
+            } else {
+                Log.e(TAG, "Error retrieving balance for tankId: " + tankId);
+            }
+        } catch (Exception e) {
+            // Handle the exception
+            Log.e(TAG, "Error updating balance", e);
+        }
+    }
+
+
     private void handleCellSelection(int selectedPosition) {
         // Perform actions based on the selected cell position.
         // For example, move the tank to the selected cell.
@@ -440,16 +509,14 @@
         Toast.makeText(this, "Moving to cell: " + selectedPosition, Toast.LENGTH_SHORT).show();
     }
 
+
+
     @UiThread
     public void updateTankHealth(int health) {
         TextView tankHealthTextView = findViewById(R.id.tankHealth);
         tankHealthTextView.setText("" + health);
     }
 
-//    @Subscribe
-//    public void onUpdateHealth(GridUpdateEvent event) {
-//        updateTankHealth(event.getHealth());
-//    }
 
     @Background
     void updateHealthAsync(long tankId) {
@@ -461,31 +528,25 @@
                 // Only update the health if it's not null
                 Log.e(TAG, "HealthWrapper value: " + healthWrapper.getResult());
                 long health = healthWrapper.getResult();
-                updateTankHealth((int) health);
-                Log.e(TAG, "Received health from restClient.getHealth: " + health);
+                updateHealthUI(healthWrapper);;
+                //updateBalanceAsync(tankId);
+                Log.e(TAG, "Received health from restClient.getHealth: " + health + "tank id is: " +  tankId);
             } else {
                 Log.e(TAG, "Received null health from restClient.getHealth for tankId: " + tankId);
             }
         } catch (Exception e) {
-            // Handle the exception
             Log.e(TAG, "Error updating tank health", e);
         }
     }
 
 
-
-    /**
-    @Click(R.id.buttonLogin)
-    void login() {
-        Intent intent = new Intent(this, AuthenticateActivity_.class);
-        startActivity(intent);
-    }
-**/
-
     @Background
     void leaveAsync(long tankId) {
         System.out.println("Leave called, tank ID: " + tankId);
         BackgroundExecutor.cancelAll("grid_poller_task", true);
         restClient.leave(tankId);
     }
+
+
+
 }
Index: client/src/main/java/edu/unh/cs/cs619/bulletzone/rest/BulletZoneRestClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.unh.cs.cs619.bulletzone.rest;\r\n\r\nimport org.androidannotations.rest.spring.annotations.Delete;\r\nimport org.androidannotations.rest.spring.annotations.Get;\r\nimport org.androidannotations.rest.spring.annotations.Path;\r\nimport org.androidannotations.rest.spring.annotations.Post;\r\nimport org.androidannotations.rest.spring.annotations.Put;\r\nimport org.androidannotations.rest.spring.annotations.Rest;\r\nimport org.androidannotations.rest.spring.api.RestClientErrorHandling;\r\nimport org.springframework.http.converter.StringHttpMessageConverter;\r\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\r\nimport org.springframework.web.client.RestClientException;\r\n\r\nimport edu.unh.cs.cs619.bulletzone.util.BooleanWrapper;\r\nimport edu.unh.cs.cs619.bulletzone.util.GridWrapper;\r\nimport edu.unh.cs.cs619.bulletzone.util.LongWrapper;\r\n\r\n/** \"http://stman1.cs.unh.edu:6191/games\"\r\n * \"http://10.0.0.145:6191/games\"\r\n * http://10.0.2.2:8080/\r\n * Created by simon on 10/1/14.\r\n */\r\n\r\n//@Rest(rootUrl = \"http://10.21.159.62:8080/games\",\r\n@Rest(rootUrl = \"http://10.21.206.173:6197/games\",\r\n//@Rest(rootUrl = \"http://stman1.cs.unh.edu:61902/games\",\r\n        converters = {StringHttpMessageConverter.class, MappingJackson2HttpMessageConverter.class}\r\n        // TODO: disable intercepting and logging\r\n        // , interceptors = { HttpLoggerInterceptor.class }\r\n)\r\npublic interface BulletZoneRestClient extends RestClientErrorHandling {\r\n    void setRootUrl(String rootUrl);\r\n\r\n    @Post(\"\")\r\n    LongWrapper join() throws RestClientException;\r\n\r\n    @Get(\"\")\r\n    GridWrapper grid();\r\n\r\n    @Put(\"/account/register/{username}/{password}\")\r\n    BooleanWrapper register(@Path String username, @Path String password);\r\n\r\n    @Put(\"/account/login/{username}/{password}\")\r\n    LongWrapper login(@Path String username, @Path String password);\r\n\r\n    @Put(\"/{tankId}/move/{direction}\")\r\n    BooleanWrapper move(@Path long tankId, @Path byte direction);\r\n\r\n    @Put(\"/{tankId}/turn/{direction}\")\r\n    BooleanWrapper turn(@Path long tankId, @Path byte direction);\r\n\r\n    @Put(\"/{tankId}/fire/1\")\r\n    BooleanWrapper fire(@Path long tankId);\r\n\r\n    @Delete(\"/{tankId}/leave\")\r\n    BooleanWrapper leave(@Path long tankId);\r\n\r\n    @Post(\"/soldier/{tankId}\")\r\n    LongWrapper deploySoldier(@Path long tankId);\r\n    @Put(\"/{tankId}/updateLife/{newLife}\")\r\n    BooleanWrapper updateLife(@Path long tankId, @Path int newLife);\r\n\r\n    @Get(\"/{tankId}/getHealth\")\r\n    LongWrapper getHealth(@Path long tankId);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/main/java/edu/unh/cs/cs619/bulletzone/rest/BulletZoneRestClient.java b/client/src/main/java/edu/unh/cs/cs619/bulletzone/rest/BulletZoneRestClient.java
--- a/client/src/main/java/edu/unh/cs/cs619/bulletzone/rest/BulletZoneRestClient.java	(revision c3706688914e5f5c4304d8969304341770b4e6f9)
+++ b/client/src/main/java/edu/unh/cs/cs619/bulletzone/rest/BulletZoneRestClient.java	(date 1700158155326)
@@ -22,7 +22,7 @@
  */
 
 //@Rest(rootUrl = "http://10.21.159.62:8080/games",
-@Rest(rootUrl = "http://10.21.206.173:6197/games",
+@Rest(rootUrl = "http://10.21.96.125:6110/games",
 //@Rest(rootUrl = "http://stman1.cs.unh.edu:61902/games",
         converters = {StringHttpMessageConverter.class, MappingJackson2HttpMessageConverter.class}
         // TODO: disable intercepting and logging
@@ -62,4 +62,14 @@
 
     @Get("/{tankId}/getHealth")
     LongWrapper getHealth(@Path long tankId);
+
+
+    @Post("/account/modifyBalance/{userId}/{amount}")
+    BooleanWrapper modifyBalance(@Path long userId, @Path int amount);
+
+    @Get("/account/getBalance/{userId}")
+    LongWrapper getBalance(@Path long userId);
+
+    @Post("/{tankId}/setPowerup/{powerupValue}")
+    void setTankPowerup(@Path long tankId, @Path int powerupValue);
 }
Index: server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/InMemoryGameRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.unh.cs.cs619.bulletzone.repository;\r\n\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport java.sql.Timestamp;\r\nimport java.util.LinkedList;\r\nimport java.util.Random;\r\nimport java.util.Stack;\r\nimport java.util.concurrent.atomic.AtomicLong;\r\n\r\nimport edu.unh.cs.cs619.bulletzone.model.Direction;\r\nimport edu.unh.cs.cs619.bulletzone.model.FieldEntities;\r\nimport edu.unh.cs.cs619.bulletzone.model.FieldHolder;\r\nimport edu.unh.cs.cs619.bulletzone.model.Game;\r\nimport edu.unh.cs.cs619.bulletzone.model.IllegalTransitionException;\r\nimport edu.unh.cs.cs619.bulletzone.model.LimitExceededException;\r\nimport edu.unh.cs.cs619.bulletzone.model.Tank;\r\nimport edu.unh.cs.cs619.bulletzone.model.TankDoesNotExistException;\r\nimport edu.unh.cs.cs619.bulletzone.util.LongWrapper;\r\n\r\n@Component\r\npublic class InMemoryGameRepository implements GameRepository {\r\n\r\n    /**\r\n     * Field dimensions\r\n     */\r\n    private static final int FIELD_DIM = 16;\r\n\r\n\r\n    /**\r\n     * Bullet's impact effect [life]\r\n     */\r\n    private static final int BULLET_DAMAGE = 1;\r\n\r\n    /**\r\n     * Tank's default life [life]\r\n     */\r\n    private static final int TANK_LIFE = 100;\r\n    private final AtomicLong idGenerator = new AtomicLong();\r\n    private final Object monitor = new Object();\r\n    private Game game = null;\r\n    private Action action;\r\n    private ActionCommandInvoker aci;\r\n\r\n    @Override\r\n    public Tank join(String ip) {\r\n        synchronized (this.monitor) {\r\n            Tank tank;\r\n            if (game == null) {\r\n               game = new Game();\r\n            }\r\n\r\n            if( (tank = game.getTank(ip)) != null){\r\n                return tank;\r\n            }\r\n\r\n            Long tankId = this.idGenerator.getAndIncrement();\r\n\r\n            tank = new Tank(tankId, Direction.Up, ip, 1);\r\n            tank.setLife(TANK_LIFE);\r\n\r\n            Random random = new Random();\r\n            int x;\r\n            int y;\r\n\r\n            // This may run for forever.. If there is no free space. XXX\r\n            for (; ; ) {\r\n                x = random.nextInt(FIELD_DIM);\r\n                y = random.nextInt(FIELD_DIM);\r\n                FieldHolder fieldElement = game.getHolderGrid().get(x * FIELD_DIM + y);\r\n                if (!fieldElement.isPresent()) {\r\n                    fieldElement.setFieldEntity(tank);\r\n                    tank.setParent(fieldElement);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            game.addTank(ip, tank);\r\n\r\n            /*\r\n            I have abstracted this into the Action class\r\n            - I think I need to make this a command pattern\r\n\r\n            Join will be called first\r\n             */\r\n\r\n            // SETH\r\n            // creating a new action and invoker class\r\n            action = new Action(monitor, game); // Watch placement\r\n            aci = new ActionCommandInvoker();\r\n\r\n            return tank;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int[][] getGrid() {\r\n        synchronized (this.monitor) {\r\n            if (game == null) {\r\n                game = new Game();\r\n            }\r\n        }\r\n        return game.getGrid2D();\r\n    }\r\n\r\n    @Override\r\n    public boolean turn(long tankId, Direction direction)\r\n            throws TankDoesNotExistException, IllegalTransitionException, LimitExceededException {\r\n        // calling our new Action class\r\n        //boolean res = action.turn(tankId, direction);\r\n        Command turn_me = new ConcreteTurnCommand(action, tankId, direction);\r\n        return aci.executeCommand(tankId, turn_me);\r\n    }\r\n\r\n    @Override\r\n    public boolean move(long tankId, Direction direction)\r\n            throws TankDoesNotExistException, IllegalTransitionException, LimitExceededException {\r\n        //boolean res = action.move(tankId, direction);\r\n        Command move_me = new ConcreteMoveCommand(action, tankId, direction);\r\n        return aci.executeCommand(tankId, move_me);\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    public boolean fire(long tankId, int bulletType)\r\n            throws TankDoesNotExistException, LimitExceededException, IllegalTransitionException {\r\n        //boolean res = action.fire(tankId, bulletType);\r\n        Command fire_me = new ConcreteFireCommand(action, tankId, bulletType);\r\n        return aci.executeCommand(tankId, fire_me);\r\n    }\r\n\r\n    @Override\r\n    public void leave(long tankId)\r\n            throws TankDoesNotExistException {\r\n        synchronized (this.monitor) {\r\n            if (!this.game.getTanks().containsKey(tankId)) {\r\n                throw new TankDoesNotExistException(tankId);\r\n            }\r\n\r\n            System.out.println(\"leave() called, tank ID: \" + tankId);\r\n\r\n            Tank tank = game.getTanks().get(tankId);\r\n            FieldHolder parent = tank.getParent();\r\n            parent.clearField();\r\n            game.removeTank(tankId);\r\n        }\r\n    }\r\n\r\n\r\n\r\n//    public void create() {\r\n//        if (game != null) {\r\n//            return;\r\n//        }\r\n//        synchronized (this.monitor) {\r\n//\r\n//            this.game = new Game();\r\n//\r\n//            createFieldHolderGrid(game);\r\n//            FieldEntities f = new FieldEntities();\r\n//            game = f.set(game);\r\n//\r\n//        }\r\n//    }\r\n\r\n//    private void createFieldHolderGrid(Game game) {\r\n//        synchronized (this.monitor) {\r\n//            game.getHolderGrid().clear();\r\n//            for (int i = 0; i < FIELD_DIM * FIELD_DIM; i++) {\r\n//                game.getHolderGrid().add(new FieldHolder());\r\n//            }\r\n//\r\n//            FieldHolder targetHolder;\r\n//            FieldHolder rightHolder;\r\n//            FieldHolder downHolder;\r\n//\r\n//            // Build connections\r\n//            for (int i = 0; i < FIELD_DIM; i++) {\r\n//                for (int j = 0; j < FIELD_DIM; j++) {\r\n//                    targetHolder = game.getHolderGrid().get(i * FIELD_DIM + j);\r\n//                    rightHolder = game.getHolderGrid().get(i * FIELD_DIM\r\n//                            + ((j + 1) % FIELD_DIM));\r\n//                    downHolder = game.getHolderGrid().get(((i + 1) % FIELD_DIM)\r\n//                            * FIELD_DIM + j);\r\n//\r\n//                    targetHolder.addNeighbor(Direction.Right, rightHolder);\r\n//                    rightHolder.addNeighbor(Direction.Left, targetHolder);\r\n//\r\n//                    targetHolder.addNeighbor(Direction.Down, downHolder);\r\n//                    downHolder.addNeighbor(Direction.Up, targetHolder);\r\n//                }\r\n//            }\r\n//        }\r\n//    }\r\n    //TODO: not initializing correctly?\r\n//    public void create() {\r\n//        Board brd = new Board(this.game, this.monitor);\r\n//        brd.create();\r\n//        this.game = brd.getGame();\r\n//    }\r\n\r\n    public LinkedList<GridEvent> getHistory(Timestamp timestamp) {\r\n        return aci.getHistory(timestamp);\r\n    }\r\n\r\n    @Override\r\n    public void updateLife(long tankId, int newLife) throws IllegalTransitionException, LimitExceededException, TankDoesNotExistException {\r\n        Command updateLifeCommand = new ConcreteUpdateLifeCommand(action, tankId, newLife);\r\n        aci.executeCommand(tankId, updateLifeCommand);\r\n    }\r\n\r\n    @Override\r\n    public int getHealth(long tankId) throws IllegalTransitionException, LimitExceededException, TankDoesNotExistException {\r\n        Command getHealth = new ConcreteGetHealthCommand(action, tankId);\r\n        //aci.executeCommand(tankId, getHealth);\r\n        int res = getHealth.execute1();\r\n\r\n        return res;\r\n    }\r\n\r\n\r\n    public Stack<GridEvent> getCommandHistory() {\r\n        return aci.getCommandHistory();\r\n    }\r\n\r\n    @Override\r\n    public LongWrapper deploySoldier(long tankID) {\r\n        return game.deploySoldier(tankID);\r\n    }\r\n}\r\n//\r\n//package edu.unh.cs.cs619.bulletzone.repository;\r\n//\r\n//import org.springframework.stereotype.Component;\r\n//\r\n//import java.sql.Timestamp;\r\n//import java.util.LinkedList;\r\n//import java.util.Random;\r\n//import java.util.Stack;\r\n//import java.util.concurrent.atomic.AtomicLong;\r\n//\r\n//import edu.unh.cs.cs619.bulletzone.model.Direction;\r\n//import edu.unh.cs.cs619.bulletzone.model.FieldEntities;\r\n//import edu.unh.cs.cs619.bulletzone.model.FieldHolder;\r\n//import edu.unh.cs.cs619.bulletzone.model.Game;\r\n//import edu.unh.cs.cs619.bulletzone.model.IllegalTransitionException;\r\n//import edu.unh.cs.cs619.bulletzone.model.LimitExceededException;\r\n//import edu.unh.cs.cs619.bulletzone.model.Tank;\r\n//import edu.unh.cs.cs619.bulletzone.model.TankDoesNotExistException;\r\n//\r\n//\r\n//import static com.google.common.base.Preconditions.checkNotNull;\r\n//\r\n//@Component\r\n//public class InMemoryGameRepository implements GameRepository {\r\n//\r\n//    /**\r\n//     * Field dimensions\r\n//     */\r\n//    private static final int FIELD_DIM = 16;\r\n//\r\n//\r\n//    /**\r\n//     * Bullet's impact effect [life]\r\n//     */\r\n//    private static final int BULLET_DAMAGE = 1;\r\n//\r\n//    /**\r\n//     * Tank's default life [life]\r\n//     */\r\n//    private static final int TANK_LIFE = 100;\r\n//    private final AtomicLong idGenerator = new AtomicLong();\r\n//    private final Object monitor = new Object();\r\n//    private Game game = null;\r\n//    private Action action;\r\n//    private ActionCommandInvoker aci;\r\n//\r\n//    @Override\r\n//    public Tank join(String ip) {\r\n//        synchronized (this.monitor) {\r\n//            Tank tank;\r\n//            if (game == null) {\r\n//                this.create();\r\n//            }\r\n//\r\n//            if( (tank = game.getTank(ip)) != null){\r\n//                return tank;\r\n//            }\r\n//\r\n//            Long tankId = this.idGenerator.getAndIncrement();\r\n//\r\n//            tank = new Tank(tankId, Direction.Up, ip);\r\n//            tank.setLife(TANK_LIFE);\r\n//\r\n//            Random random = new Random();\r\n//            int x;\r\n//            int y;\r\n//\r\n//            // This may run for forever.. If there is no free space. XXX\r\n//            for (; ; ) {\r\n//                x = random.nextInt(FIELD_DIM);\r\n//                y = random.nextInt(FIELD_DIM);\r\n//                FieldHolder fieldElement = game.getHolderGrid().get(x * FIELD_DIM + y);\r\n//                if (!fieldElement.isPresent()) {\r\n//                    fieldElement.setFieldEntity(tank);\r\n//                    tank.setParent(fieldElement);\r\n//                    break;\r\n//                }\r\n//            }\r\n//\r\n//            game.addTank(ip, tank);\r\n//\r\n//            /*\r\n//            I have abstracted this into the Action class\r\n//            - I think I need to make this a command pattern\r\n//\r\n//            Join will be called first\r\n//             */\r\n//\r\n//            // SETH\r\n//            // creating a new action and invoker class\r\n//            action = new Action(monitor, game); // Watch placement\r\n//            aci = new ActionCommandInvoker();\r\n//\r\n//            return tank;\r\n//        }\r\n//    }\r\n//\r\n//    @Override\r\n//    public int[][] getGrid() {\r\n//        synchronized (this.monitor) {\r\n//            if (game == null) {\r\n//                this.create();\r\n//            }\r\n//        }\r\n//        return game.getGrid2D();\r\n//    }\r\n//\r\n//    @Override\r\n//    public boolean turn(long tankId, Direction direction)\r\n//            throws TankDoesNotExistException, IllegalTransitionException, LimitExceededException {\r\n//        // calling our new Action class\r\n//        //boolean res = action.turn(tankId, direction);\r\n//        Command turn_me = new ConcreteTurnCommand(action, tankId, direction);\r\n//        return aci.executeCommand(tankId, turn_me);\r\n//    }\r\n//\r\n//    @Override\r\n//    public boolean move(long tankId, Direction direction)\r\n//            throws TankDoesNotExistException, IllegalTransitionException, LimitExceededException {\r\n//        //boolean res = action.move(tankId, direction);\r\n//        Command move_me = new ConcreteMoveCommand(action, tankId, direction);\r\n//        return aci.executeCommand(tankId, move_me);\r\n//    }\r\n//\r\n//    @Override\r\n//    public boolean fire(long tankId, int bulletType)\r\n//            throws TankDoesNotExistException, LimitExceededException, IllegalTransitionException {\r\n//        //boolean res = action.fire(tankId, bulletType);\r\n//        Command fire_me = new ConcreteFireCommand(action, tankId, bulletType);\r\n//        return aci.executeCommand(tankId, fire_me);\r\n//    }\r\n//\r\n//    @Override\r\n//    public void leave(long tankId)\r\n//            throws TankDoesNotExistException {\r\n//        synchronized (this.monitor) {\r\n//            if (!this.game.getTanks().containsKey(tankId)) {\r\n//                throw new TankDoesNotExistException(tankId);\r\n//            }\r\n//\r\n//            System.out.println(\"leave() called, tank ID: \" + tankId);\r\n//\r\n//            Tank tank = game.getTanks().get(tankId);\r\n//            FieldHolder parent = tank.getParent();\r\n//            parent.clearField();\r\n//            game.removeTank(tankId);\r\n//        }\r\n//    }\r\n//\r\n//\r\n//\r\n//    public void create() {\r\n//        if (game != null) {\r\n//            return;\r\n//        }\r\n//        synchronized (this.monitor) {\r\n//\r\n//            this.game = new Game();\r\n//\r\n//            createFieldHolderGrid(game);\r\n//            FieldEntities f = new FieldEntities();\r\n//            game = f.set(game);\r\n//\r\n//        }\r\n//    }\r\n//\r\n//    private void createFieldHolderGrid(Game game) {\r\n//        synchronized (this.monitor) {\r\n//            game.getHolderGrid().clear();\r\n//            for (int i = 0; i < FIELD_DIM * FIELD_DIM; i++) {\r\n//                game.getHolderGrid().add(new FieldHolder());\r\n//            }\r\n//\r\n//            FieldHolder targetHolder;\r\n//            FieldHolder rightHolder;\r\n//            FieldHolder downHolder;\r\n//\r\n//            // Build connections\r\n//            for (int i = 0; i < FIELD_DIM; i++) {\r\n//                for (int j = 0; j < FIELD_DIM; j++) {\r\n//                    targetHolder = game.getHolderGrid().get(i * FIELD_DIM + j);\r\n//                    rightHolder = game.getHolderGrid().get(i * FIELD_DIM\r\n//                            + ((j + 1) % FIELD_DIM));\r\n//                    downHolder = game.getHolderGrid().get(((i + 1) % FIELD_DIM)\r\n//                            * FIELD_DIM + j);\r\n//\r\n//                    targetHolder.addNeighbor(Direction.Right, rightHolder);\r\n//                    rightHolder.addNeighbor(Direction.Left, targetHolder);\r\n//\r\n//                    targetHolder.addNeighbor(Direction.Down, downHolder);\r\n//                    downHolder.addNeighbor(Direction.Up, targetHolder);\r\n//                }\r\n//            }\r\n//        }\r\n//    }\r\n//\r\n//\r\n//    public LinkedList<GridEvent> getHistory(Timestamp timestamp) {\r\n//        return aci.getHistory(timestamp);\r\n//    }\r\n//\r\n//    public Stack<GridEvent> getCommandHistory() {\r\n//        return aci.getCommandHistory();\r\n//    }\r\n//\r\n//\r\n//}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/InMemoryGameRepository.java b/server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/InMemoryGameRepository.java
--- a/server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/InMemoryGameRepository.java	(revision c3706688914e5f5c4304d8969304341770b4e6f9)
+++ b/server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/InMemoryGameRepository.java	(date 1700107364363)
@@ -149,50 +149,7 @@
 
 
 
-//    public void create() {
-//        if (game != null) {
-//            return;
-//        }
-//        synchronized (this.monitor) {
-//
-//            this.game = new Game();
-//
-//            createFieldHolderGrid(game);
-//            FieldEntities f = new FieldEntities();
-//            game = f.set(game);
-//
-//        }
-//    }
 
-//    private void createFieldHolderGrid(Game game) {
-//        synchronized (this.monitor) {
-//            game.getHolderGrid().clear();
-//            for (int i = 0; i < FIELD_DIM * FIELD_DIM; i++) {
-//                game.getHolderGrid().add(new FieldHolder());
-//            }
-//
-//            FieldHolder targetHolder;
-//            FieldHolder rightHolder;
-//            FieldHolder downHolder;
-//
-//            // Build connections
-//            for (int i = 0; i < FIELD_DIM; i++) {
-//                for (int j = 0; j < FIELD_DIM; j++) {
-//                    targetHolder = game.getHolderGrid().get(i * FIELD_DIM + j);
-//                    rightHolder = game.getHolderGrid().get(i * FIELD_DIM
-//                            + ((j + 1) % FIELD_DIM));
-//                    downHolder = game.getHolderGrid().get(((i + 1) % FIELD_DIM)
-//                            * FIELD_DIM + j);
-//
-//                    targetHolder.addNeighbor(Direction.Right, rightHolder);
-//                    rightHolder.addNeighbor(Direction.Left, targetHolder);
-//
-//                    targetHolder.addNeighbor(Direction.Down, downHolder);
-//                    downHolder.addNeighbor(Direction.Up, targetHolder);
-//                }
-//            }
-//        }
-//    }
     //TODO: not initializing correctly?
 //    public void create() {
 //        Board brd = new Board(this.game, this.monitor);
@@ -219,6 +176,14 @@
         return res;
     }
 
+    @Override
+    public void setTankPowerup(long tankId, int powerupValue) {
+        Tank tank = game.getTanks().get(tankId);
+        if(tank != null) {
+            tank.setPowerUpType(powerupValue);
+        }
+    }
+
 
     public Stack<GridEvent> getCommandHistory() {
         return aci.getCommandHistory();
@@ -229,211 +194,4 @@
         return game.deploySoldier(tankID);
     }
 }
-//
-//package edu.unh.cs.cs619.bulletzone.repository;
-//
-//import org.springframework.stereotype.Component;
-//
-//import java.sql.Timestamp;
-//import java.util.LinkedList;
-//import java.util.Random;
-//import java.util.Stack;
-//import java.util.concurrent.atomic.AtomicLong;
-//
-//import edu.unh.cs.cs619.bulletzone.model.Direction;
-//import edu.unh.cs.cs619.bulletzone.model.FieldEntities;
-//import edu.unh.cs.cs619.bulletzone.model.FieldHolder;
-//import edu.unh.cs.cs619.bulletzone.model.Game;
-//import edu.unh.cs.cs619.bulletzone.model.IllegalTransitionException;
-//import edu.unh.cs.cs619.bulletzone.model.LimitExceededException;
-//import edu.unh.cs.cs619.bulletzone.model.Tank;
-//import edu.unh.cs.cs619.bulletzone.model.TankDoesNotExistException;
-//
-//
-//import static com.google.common.base.Preconditions.checkNotNull;
-//
-//@Component
-//public class InMemoryGameRepository implements GameRepository {
-//
-//    /**
-//     * Field dimensions
-//     */
-//    private static final int FIELD_DIM = 16;
-//
-//
-//    /**
-//     * Bullet's impact effect [life]
-//     */
-//    private static final int BULLET_DAMAGE = 1;
-//
-//    /**
-//     * Tank's default life [life]
-//     */
-//    private static final int TANK_LIFE = 100;
-//    private final AtomicLong idGenerator = new AtomicLong();
-//    private final Object monitor = new Object();
-//    private Game game = null;
-//    private Action action;
-//    private ActionCommandInvoker aci;
-//
-//    @Override
-//    public Tank join(String ip) {
-//        synchronized (this.monitor) {
-//            Tank tank;
-//            if (game == null) {
-//                this.create();
-//            }
-//
-//            if( (tank = game.getTank(ip)) != null){
-//                return tank;
-//            }
-//
-//            Long tankId = this.idGenerator.getAndIncrement();
-//
-//            tank = new Tank(tankId, Direction.Up, ip);
-//            tank.setLife(TANK_LIFE);
-//
-//            Random random = new Random();
-//            int x;
-//            int y;
-//
-//            // This may run for forever.. If there is no free space. XXX
-//            for (; ; ) {
-//                x = random.nextInt(FIELD_DIM);
-//                y = random.nextInt(FIELD_DIM);
-//                FieldHolder fieldElement = game.getHolderGrid().get(x * FIELD_DIM + y);
-//                if (!fieldElement.isPresent()) {
-//                    fieldElement.setFieldEntity(tank);
-//                    tank.setParent(fieldElement);
-//                    break;
-//                }
-//            }
-//
-//            game.addTank(ip, tank);
-//
-//            /*
-//            I have abstracted this into the Action class
-//            - I think I need to make this a command pattern
-//
-//            Join will be called first
-//             */
-//
-//            // SETH
-//            // creating a new action and invoker class
-//            action = new Action(monitor, game); // Watch placement
-//            aci = new ActionCommandInvoker();
-//
-//            return tank;
-//        }
-//    }
-//
-//    @Override
-//    public int[][] getGrid() {
-//        synchronized (this.monitor) {
-//            if (game == null) {
-//                this.create();
-//            }
-//        }
-//        return game.getGrid2D();
-//    }
-//
-//    @Override
-//    public boolean turn(long tankId, Direction direction)
-//            throws TankDoesNotExistException, IllegalTransitionException, LimitExceededException {
-//        // calling our new Action class
-//        //boolean res = action.turn(tankId, direction);
-//        Command turn_me = new ConcreteTurnCommand(action, tankId, direction);
-//        return aci.executeCommand(tankId, turn_me);
-//    }
-//
-//    @Override
-//    public boolean move(long tankId, Direction direction)
-//            throws TankDoesNotExistException, IllegalTransitionException, LimitExceededException {
-//        //boolean res = action.move(tankId, direction);
-//        Command move_me = new ConcreteMoveCommand(action, tankId, direction);
-//        return aci.executeCommand(tankId, move_me);
-//    }
-//
-//    @Override
-//    public boolean fire(long tankId, int bulletType)
-//            throws TankDoesNotExistException, LimitExceededException, IllegalTransitionException {
-//        //boolean res = action.fire(tankId, bulletType);
-//        Command fire_me = new ConcreteFireCommand(action, tankId, bulletType);
-//        return aci.executeCommand(tankId, fire_me);
-//    }
-//
-//    @Override
-//    public void leave(long tankId)
-//            throws TankDoesNotExistException {
-//        synchronized (this.monitor) {
-//            if (!this.game.getTanks().containsKey(tankId)) {
-//                throw new TankDoesNotExistException(tankId);
-//            }
-//
-//            System.out.println("leave() called, tank ID: " + tankId);
-//
-//            Tank tank = game.getTanks().get(tankId);
-//            FieldHolder parent = tank.getParent();
-//            parent.clearField();
-//            game.removeTank(tankId);
-//        }
-//    }
-//
-//
-//
-//    public void create() {
-//        if (game != null) {
-//            return;
-//        }
-//        synchronized (this.monitor) {
-//
-//            this.game = new Game();
-//
-//            createFieldHolderGrid(game);
-//            FieldEntities f = new FieldEntities();
-//            game = f.set(game);
-//
-//        }
-//    }
-//
-//    private void createFieldHolderGrid(Game game) {
-//        synchronized (this.monitor) {
-//            game.getHolderGrid().clear();
-//            for (int i = 0; i < FIELD_DIM * FIELD_DIM; i++) {
-//                game.getHolderGrid().add(new FieldHolder());
-//            }
-//
-//            FieldHolder targetHolder;
-//            FieldHolder rightHolder;
-//            FieldHolder downHolder;
-//
-//            // Build connections
-//            for (int i = 0; i < FIELD_DIM; i++) {
-//                for (int j = 0; j < FIELD_DIM; j++) {
-//                    targetHolder = game.getHolderGrid().get(i * FIELD_DIM + j);
-//                    rightHolder = game.getHolderGrid().get(i * FIELD_DIM
-//                            + ((j + 1) % FIELD_DIM));
-//                    downHolder = game.getHolderGrid().get(((i + 1) % FIELD_DIM)
-//                            * FIELD_DIM + j);
-//
-//                    targetHolder.addNeighbor(Direction.Right, rightHolder);
-//                    rightHolder.addNeighbor(Direction.Left, targetHolder);
-//
-//                    targetHolder.addNeighbor(Direction.Down, downHolder);
-//                    downHolder.addNeighbor(Direction.Up, targetHolder);
-//                }
-//            }
-//        }
-//    }
-//
-//
-//    public LinkedList<GridEvent> getHistory(Timestamp timestamp) {
-//        return aci.getHistory(timestamp);
-//    }
-//
-//    public Stack<GridEvent> getCommandHistory() {
-//        return aci.getCommandHistory();
-//    }
-//
-//
-//}
+
Index: server/src/main/java/edu/unh/cs/cs619/bulletzone/datalayer/user/GameUserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.unh.cs.cs619.bulletzone.datalayer.user;\r\n\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.security.SecureRandom;\r\nimport java.security.spec.InvalidKeySpecException;\r\nimport java.security.spec.KeySpec;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.sql.Statement;\r\nimport java.util.AbstractMap;\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\nimport java.util.HashMap;\r\n\r\nimport javax.crypto.SecretKeyFactory;\r\nimport javax.crypto.spec.PBEKeySpec;\r\n\r\nimport edu.unh.cs.cs619.bulletzone.datalayer.BulletZoneData;\r\nimport edu.unh.cs.cs619.bulletzone.datalayer.core.Entity;\r\nimport edu.unh.cs.cs619.bulletzone.datalayer.core.EntityRepository;\r\nimport edu.unh.cs.cs619.bulletzone.datalayer.core.EntityType;\r\nimport edu.unh.cs.cs619.bulletzone.datalayer.core.Status;\r\nimport edu.unh.cs.cs619.bulletzone.datalayer.item.GameItemRepository;\r\n\r\npublic class GameUserRepository implements EntityRepository {\r\n    HashMap<Integer, GameUser> userMap = new HashMap<>();\r\n    HashMap<String, GameUser> usernameToUserMap = new HashMap<>();\r\n    BulletZoneData data;\r\n\r\n    final int iterations = 65536;\r\n    final int keySize = 128;\r\n    final int saltSize = 16;\r\n\r\n    /**\r\n     * @return A collection of all ItemCategories in the database\r\n     */\r\n    public Collection<GameUser> getUsers() { return userMap.values(); }\r\n\r\n    /**\r\n     * @param userID    ID of the user to get\r\n     * @return  GameUser corresponding to passed ID\r\n     */\r\n    public GameUser getUser(int userID) { return userMap.get(userID); }\r\n\r\n    public GameUser getUser(String username) { return usernameToUserMap.get(username); }\r\n\r\n    /**\r\n     * Returns a new user, or null if an active user with the passed username already exists.\r\n     * @param name  New user's screen name\r\n     * @param username  User's username for the purpose of logging-in/authorizing\r\n     * @param password  User's password for the purpose of logging-in/authorizing\r\n     * @return  New GameUser object corresponding to the newly created user, or null if already\r\n     *          exists. Any database errors result in exceptions.\r\n     */\r\n    public GameUser createUser(String name, String username, String password) {\r\n        if (getUser(username) != null)\r\n            return null;\r\n\r\n        GameUserRecord newRecord = new GameUserRecord(name, username);\r\n        GameUser newUser = null;\r\n\r\n        //The following is adapted from https://www.baeldung.com/java-password-hashing\r\n        SecureRandom random = new SecureRandom();\r\n        byte[] salt = new byte[saltSize];\r\n        random.nextBytes(salt);\r\n\r\n        try {\r\n            KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, iterations, keySize);\r\n            SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\r\n            byte[] hash = factory.generateSecret(spec).getEncoded();\r\n            newRecord.passwordHash = hash;\r\n            newRecord.passwordSalt = salt;\r\n        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {\r\n            throw new IllegalStateException(\"Unable to attempt password creation!\", e);\r\n        }\r\n\r\n        try {\r\n            Connection dataConnection = data.getConnection();\r\n            if (dataConnection == null)\r\n                return null;\r\n\r\n            // Create base item\r\n            newRecord.insertInto(dataConnection);\r\n            dataConnection.close();\r\n            newUser = new GameUser(newRecord);\r\n            userMap.put(newUser.getId(), newUser);\r\n            usernameToUserMap.put(newRecord.username, newUser);\r\n        } catch (SQLException e) {\r\n            throw new IllegalStateException(\"Error while creating user!\", e);\r\n        }\r\n        System.out.println(\"New user \" + username + \" added with ID \" + newUser.getId());\r\n        return newUser;\r\n    }\r\n\r\n    /**\r\n     * Returns the GameUser associated with a given username if the password matches\r\n     * @param username  Username for the desired user\r\n     * @param password  Password for the desired user\r\n     * @return  GameUser corresponding to the username/password, or\r\n     *          null if not found or wrong password\r\n     */\r\n    public GameUser validateLogin(String username, String password) {\r\n        Connection dataConnection = data.getConnection();\r\n        if (dataConnection == null)\r\n            return null;\r\n\r\n        GameUserRecord userRecord = null;\r\n        try {\r\n            //use a PreparedStatement to avoid SQL injection via the username.\r\n            String selectString =\r\n                \"SELECT * FROM User u, Entity e WHERE u.EntityID = e.EntityID AND e.StatusID != \"\r\n                    + Status.Deleted.ordinal() + \" AND u.Username = ?\";\r\n            PreparedStatement statement = dataConnection.prepareStatement(selectString);\r\n            // Read users that aren't deleted\r\n            statement.setString(1, username);\r\n            ResultSet userResult = statement.executeQuery();\r\n            if (userResult.next()) //else, is empty result list\r\n            {\r\n                userRecord = new GameUserRecord(userResult);\r\n            }\r\n            dataConnection.close();\r\n        } catch (SQLException e) {\r\n            throw new IllegalStateException(\"Unable to access user table for password validation!\", e);\r\n        }\r\n        if (userRecord == null)\r\n            return null;\r\n\r\n        //The following is adapted from https://www.baeldung.com/java-password-hashing\r\n        try {\r\n            byte[] salt = userRecord.passwordSalt;\r\n            KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, iterations, keySize);\r\n\r\n            SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\r\n            byte[] hash = factory.generateSecret(spec).getEncoded();\r\n            if (Arrays.equals(hash, userRecord.passwordHash))\r\n                return getUser(userRecord.getID()); //matches!\r\n            //else fall through\r\n        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {\r\n            throw new IllegalStateException(\"Unable to attempt password validation!\", e);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public GameUser getTarget(int userID) { return getUser(userID); }\r\n\r\n    @Override\r\n    public EntityType getTargetType() { return EntityType.User; }\r\n\r\n    @Override\r\n    public AbstractMap<Integer, GameUser> getEntities() { return userMap; }\r\n\r\n    //----------------------------------END OF PUBLIC METHODS--------------------------------------\r\n\r\n    /**\r\n     * Reads the database and fills the HashMaps as appropriate. Intended to be called once\r\n     * at time of initialization.\r\n     * @param bzData        reference to BulletZoneData class to use for SQL queries\r\n     * @param gameItemRepo  reference to already-initialized GameItemRepository\r\n     */\r\n    public void refresh(BulletZoneData bzData, GameItemRepository gameItemRepo) {\r\n        data = bzData;\r\n        usernameToUserMap.clear();\r\n        userMap.clear();\r\n        Connection dataConnection = data.getConnection();\r\n        if (dataConnection == null)\r\n            return;\r\n\r\n        try {\r\n            Statement statement = dataConnection.createStatement();\r\n            // Read users that aren't deleted\r\n            ResultSet userResult = statement.executeQuery(\r\n                    \"SELECT * FROM User u, Entity e WHERE u.EntityID = e.EntityID AND e.StatusID != \" + Status.Deleted.ordinal());\r\n            while (userResult.next()) {\r\n                GameUserRecord rec = new GameUserRecord(userResult);\r\n                GameUser user = new GameUser(rec);\r\n                userMap.put(user.getId(), user);\r\n                usernameToUserMap.put(rec.username, user);\r\n            }\r\n            dataConnection.close();\r\n        } catch (SQLException e) {\r\n            throw new IllegalStateException(\"Cannot read static info!\", e);\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/edu/unh/cs/cs619/bulletzone/datalayer/user/GameUserRepository.java b/server/src/main/java/edu/unh/cs/cs619/bulletzone/datalayer/user/GameUserRepository.java
--- a/server/src/main/java/edu/unh/cs/cs619/bulletzone/datalayer/user/GameUserRepository.java	(revision c3706688914e5f5c4304d8969304341770b4e6f9)
+++ b/server/src/main/java/edu/unh/cs/cs619/bulletzone/datalayer/user/GameUserRepository.java	(date 1700109952880)
@@ -16,8 +16,11 @@
 
 import javax.crypto.SecretKeyFactory;
 import javax.crypto.spec.PBEKeySpec;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import edu.unh.cs.cs619.bulletzone.datalayer.BulletZoneData;
+import edu.unh.cs.cs619.bulletzone.datalayer.account.BankAccount;
 import edu.unh.cs.cs619.bulletzone.datalayer.core.Entity;
 import edu.unh.cs.cs619.bulletzone.datalayer.core.EntityRepository;
 import edu.unh.cs.cs619.bulletzone.datalayer.core.EntityType;
@@ -87,6 +90,9 @@
             newUser = new GameUser(newRecord);
             userMap.put(newUser.getId(), newUser);
             usernameToUserMap.put(newRecord.username, newUser);
+            BankAccount account = data.accounts.create();
+            data.permissions.setOwner(account, newUser);
+            System.out.println("New user " + username + " added with ID " + newUser.getId());
         } catch (SQLException e) {
             throw new IllegalStateException("Error while creating user!", e);
         }
Index: server/src/main/java/edu/unh/cs/cs619/bulletzone/datalayer/account/BankAccount.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.unh.cs.cs619.bulletzone.datalayer.account;\r\n\r\nimport edu.unh.cs.cs619.bulletzone.datalayer.permission.OwnableEntity;\r\n\r\npublic class BankAccount extends OwnableEntity {\r\n    protected double balance;\r\n\r\n    public double getBalance() { return balance; }\r\n\r\n    //----------------------------------END OF PUBLIC METHODS--------------------------------------\r\n    BankAccount(BankAccountRecord rec) {\r\n        super(rec);\r\n        balance = rec.credits;\r\n    }\r\n\r\n    /**\r\n     * Modifies the credit balance for the account\r\n     * @param amount Positive or negative amount to add to the credit balance\r\n     * @return true if successful (cannot be false, currently)\r\n     */\r\n    boolean modifyBalance(double amount) {\r\n        balance += amount;\r\n        return true;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/edu/unh/cs/cs619/bulletzone/datalayer/account/BankAccount.java b/server/src/main/java/edu/unh/cs/cs619/bulletzone/datalayer/account/BankAccount.java
--- a/server/src/main/java/edu/unh/cs/cs619/bulletzone/datalayer/account/BankAccount.java	(revision c3706688914e5f5c4304d8969304341770b4e6f9)
+++ b/server/src/main/java/edu/unh/cs/cs619/bulletzone/datalayer/account/BankAccount.java	(date 1700107810553)
@@ -3,9 +3,16 @@
 import edu.unh.cs.cs619.bulletzone.datalayer.permission.OwnableEntity;
 
 public class BankAccount extends OwnableEntity {
-    protected double balance;
+    protected Double balance = 1000.0;
 
-    public double getBalance() { return balance; }
+    public Double getBalance() { return balance;}
+    public boolean modifyBalance(double amount) {
+        if (balance == null) {
+            balance = 0.0;
+        }
+        balance += amount;
+        return true;
+    }
 
     //----------------------------------END OF PUBLIC METHODS--------------------------------------
     BankAccount(BankAccountRecord rec) {
@@ -18,8 +25,8 @@
      * @param amount Positive or negative amount to add to the credit balance
      * @return true if successful (cannot be false, currently)
      */
-    boolean modifyBalance(double amount) {
-        balance += amount;
-        return true;
-    }
+//    boolean modifyBalance(double amount) {
+//        balance += amount;
+//        return true;
+//    }
 }
Index: server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/Action.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.unh.cs.cs619.bulletzone.repository;\r\n\r\nimport static com.google.common.base.Preconditions.checkNotNull;\r\n\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\n\r\nimport java.sql.SQLOutput;\r\nimport java.util.Objects;\r\nimport java.util.Timer;\r\nimport java.util.TimerTask;\r\n\r\nimport edu.unh.cs.cs619.bulletzone.model.Bullet;\r\nimport edu.unh.cs.cs619.bulletzone.model.Direction;\r\nimport edu.unh.cs.cs619.bulletzone.model.FieldHolder;\r\nimport edu.unh.cs.cs619.bulletzone.model.Game;\r\nimport edu.unh.cs.cs619.bulletzone.model.Hill;\r\nimport edu.unh.cs.cs619.bulletzone.model.IllegalTransitionException;\r\nimport edu.unh.cs.cs619.bulletzone.model.LimitExceededException;\r\nimport edu.unh.cs.cs619.bulletzone.model.Rocky;\r\nimport edu.unh.cs.cs619.bulletzone.model.Soldier;\r\nimport edu.unh.cs.cs619.bulletzone.model.Tank;\r\nimport edu.unh.cs.cs619.bulletzone.model.TankDoesNotExistException;\r\nimport edu.unh.cs.cs619.bulletzone.model.Wall;\r\n\r\n/*\r\n    I believe this should ultimately be a command? pattern\r\n */\r\npublic class Action {\r\n    private final Object monitor;\r\n    private Game game;\r\n    private final Timer timer = new Timer();\r\n\r\n    private int bulletDamage[]={10,30,50};\r\n    private int bulletDelay[]={500,1000,1500};\r\n    private int trackActiveBullets[]={0,0};\r\n\r\n    /**\r\n     * Bullet step time in milliseconds\r\n     */\r\n    private static final int BULLET_PERIOD = 200;\r\n\r\n    public Action(Object monitor, Game game) {\r\n        this.monitor = monitor;\r\n        this.game = game;\r\n    }\r\n\r\n    public boolean turn(long tankId, Direction direction)\r\n            throws TankDoesNotExistException, IllegalTransitionException, LimitExceededException {\r\n        synchronized (this.monitor) {\r\n            checkNotNull(direction);\r\n\r\n            //System.out.println(\"Turning \" + tankId + \" \" + direction.toString());\r\n\r\n            // Find user\r\n            Tank tank = game.getTanks().get(tankId);\r\n            if (tank == null) {\r\n                //Log.i(TAG, \"Cannot find user with id: \" + tankId);\r\n                throw new TankDoesNotExistException(tankId);\r\n            }\r\n\r\n            long millis = System.currentTimeMillis();\r\n            if (tank.getIsActive() == 1) {\r\n                if(millis < tank.getLastMoveTime())\r\n                    return false;\r\n\r\n                tank.setLastMoveTime(millis+tank.getAllowedMoveInterval());\r\n\r\n                /*try {\r\n                    Thread.sleep(500);\r\n                } catch(InterruptedException ex) {\r\n                    Thread.currentThread().interrupt();\r\n                }*/\r\n\r\n                tank.setDirection(direction);\r\n\r\n                return true;\r\n            } else {\r\n                Soldier soldier = game.getSoldiers().get(tankId);\r\n                if(millis < soldier.getLastMoveTime())\r\n                    return false;\r\n\r\n                soldier.setLastMoveTime(millis+tank.getAllowedMoveInterval());\r\n\r\n            /*try {\r\n                Thread.sleep(500);\r\n            } catch(InterruptedException ex) {\r\n                Thread.currentThread().interrupt();\r\n            }*/\r\n\r\n                soldier.setDirection(direction);\r\n\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public boolean move(long tankId, Direction direction)\r\n            throws TankDoesNotExistException, IllegalTransitionException, LimitExceededException {\r\n       // System.out.println(\"move before sync\");\r\n        synchronized (this.monitor) {\r\n            // Find tank\r\n          //  System.out.println(\"Moving \" + tankId + \" \" + direction.toString());\r\n\r\n            Tank tank = game.getTanks().get(tankId);\r\n            if (tank == null) {\r\n                //Log.i(TAG, \"Cannot find user with id: \" + tankId);\r\n                //return false;\r\n                throw new TankDoesNotExistException(tankId);\r\n            }\r\n\r\n            //if tank direction is not equal to forwards or backwards\r\n            //move constraint\r\n            if (tank.getIsActive() == 1) {\r\n                if (Direction.toByte(direction) != Direction.toByte(tank.getDirection()) && Direction.toByte(direction) != Direction.opposite(tank.getDirection())) {\r\n                    return false;\r\n                }\r\n\r\n\r\n                long millis = System.currentTimeMillis();\r\n                if(millis < tank.getLastMoveTime())\r\n                    return false;\r\n\r\n                tank.setLastMoveTime(millis + tank.getAllowedMoveInterval());\r\n\r\n                FieldHolder parent = tank.getParent();\r\n\r\n                FieldHolder nextField = parent.getNeighbor(direction);\r\n                checkNotNull(parent.getNeighbor(direction), \"Neightbor is not available\");\r\n\r\n                boolean isCompleted;\r\n                if (!nextField.isPresent()|| nextField.getEntity() instanceof Hill || nextField.getEntity() instanceof Rocky) {\r\n                    // If the next field is empty move the user\r\n\r\n                /*try {\r\n                    Thread.sleep(500);\r\n                } catch(InterruptedException ex) {\r\n                    Thread.currentThread().interrupt();\r\n                }*/\r\n\r\n                    parent.clearField();\r\n                    nextField.setFieldEntity(tank);\r\n                    tank.setParent(nextField);\r\n\r\n                    isCompleted = true;\r\n                } else {\r\n                    isCompleted = false;\r\n                }\r\n\r\n                return isCompleted;\r\n            } else {\r\n                Soldier soldier = game.getSoldiers().get(tankId);\r\n                if (Direction.toByte(direction) != Direction.toByte(soldier.getDirection()) && Direction.toByte(direction) != Direction.opposite(soldier.getDirection())) {\r\n                    return false;\r\n                }\r\n\r\n\r\n                long millis = System.currentTimeMillis();\r\n                if(millis < soldier.getLastMoveTime())\r\n                    return false;\r\n\r\n                soldier.setLastMoveTime(millis + soldier.getAllowedMoveInterval());\r\n\r\n                FieldHolder parent = soldier.getParent();\r\n\r\n                FieldHolder nextField = parent.getNeighbor(direction);\r\n                checkNotNull(parent.getNeighbor(direction), \"Neightbor is not available\");\r\n\r\n                boolean isCompleted;\r\n                if (!nextField.isPresent()|| nextField.getEntity() instanceof Hill || nextField.getEntity() instanceof Rocky) {\r\n                    // If the next field is empty move the user\r\n\r\n                /*try {\r\n                    Thread.sleep(500);\r\n                } catch(InterruptedException ex) {\r\n                    Thread.currentThread().interrupt();\r\n                }*/\r\n\r\n                    parent.clearField();\r\n                    nextField.setFieldEntity(soldier);\r\n                    soldier.setParent(nextField);\r\n\r\n                    isCompleted = true;\r\n                } else if (nextField.getEntity() instanceof Tank) {\r\n                    if (soldier.reenterTank(tank)) {\r\n                        game.removeSoldier(tankId);\r\n                        soldier.getParent().clearField();\r\n                        isCompleted = true;\r\n                    } else {\r\n                        // Re-entry failed, soldier is already in a tank\r\n                        isCompleted = false;\r\n                    }\r\n                }\r\n                else {\r\n                    isCompleted = false;\r\n                }\r\n\r\n                return isCompleted;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public boolean fire(long tankId, int bulletType)\r\n            throws TankDoesNotExistException, LimitExceededException {\r\n        synchronized (this.monitor) {\r\n\r\n            // Find tank\r\n            Tank tank = game.getTanks().get(tankId);\r\n            if (tank == null) {\r\n                //Log.i(TAG, \"Cannot find user with id: \" + tankId);\r\n                //return false;\r\n                throw new TankDoesNotExistException(tankId);\r\n            }\r\n            if (tank.getIsActive() == 1) {\r\n                if (tank.getNumberOfBullets() >= tank.getAllowedNumberOfBullets())\r\n                    return false;\r\n\r\n                long millis = System.currentTimeMillis();\r\n                if (millis < tank.getLastFireTime()/*>tank.getAllowedFireInterval()*/) {\r\n                    return false;\r\n                }\r\n\r\n                //Log.i(TAG, \"Cannot find user with id: \" + tankId);\r\n                Direction direction = tank.getDirection();\r\n                FieldHolder parent = tank.getParent();\r\n                tank.setNumberOfBullets(tank.getNumberOfBullets() + 1);\r\n\r\n                if (!(bulletType >= 1 && bulletType <= 3)) {\r\n                    System.out.println(\"Bullet type must be 1, 2 or 3, set to 1 by default.\");\r\n                    bulletType = 1;\r\n                }\r\n\r\n                tank.setLastFireTime(millis + bulletDelay[bulletType - 1]);\r\n\r\n                int bulletId = 0;\r\n                if (trackActiveBullets[0] == 0) {\r\n                    bulletId = 0;\r\n                    trackActiveBullets[0] = 1;\r\n                } else if (trackActiveBullets[1] == 0) {\r\n                    bulletId = 1;\r\n                    trackActiveBullets[1] = 1;\r\n                }\r\n\r\n                // Create a new bullet to fire\r\n                final Bullet bullet = new Bullet(tankId, direction, bulletDamage[bulletType - 1]);\r\n                // Set the same parent for the bullet.\r\n                // This should be only a one way reference.\r\n                bullet.setParent(parent);\r\n                bullet.setBulletId(bulletId);\r\n\r\n                // TODO make it nicer\r\n                timer.schedule(new TimerTask() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        synchronized (monitor) {\r\n                            System.out.println(\"Active Bullet: \" + tank.getNumberOfBullets() + \"---- Bullet ID: \" + bullet.getIntValue());\r\n                            FieldHolder currentField = bullet.getParent();\r\n                            Direction direction = bullet.getDirection();\r\n                            FieldHolder nextField = currentField\r\n                                    .getNeighbor(direction);\r\n\r\n                            // Is the bullet visible on the field?\r\n                            boolean isVisible = currentField.isPresent()\r\n                                    && (currentField.getEntity() == bullet);\r\n\r\n\r\n                            if (nextField.isPresent()) {\r\n                                // Something is there, hit it\r\n                                nextField.getEntity().hit(bullet.getDamage());\r\n\r\n                                if (nextField.getEntity() instanceof Tank) {\r\n                                    Tank t = (Tank) nextField.getEntity();\r\n                                    System.out.println(\"tank is hit, tank life: \" + t.getLife());\r\n                                    if (t.getLife() <= 0) {\r\n                                        t.getParent().clearField();\r\n                                        t.setParent(null);\r\n                                        game.removeTank(t.getId());\r\n                                    }\r\n                                } else if (nextField.getEntity() instanceof Soldier) { // Soldier Hit\r\n                                    Soldier s = (Soldier) nextField.getEntity();\r\n                                    System.out.println(\"soldier is hit, soldier life: \" + s.getLife());\r\n                                    if (s.getLife() <= 0) {\r\n                                        s.getParent().clearField();\r\n                                        s.setParent(null);\r\n                                        game.removeSoldier(s.getId());\r\n                                        tank.setIsActive(0);\r\n                                    }\r\n                                } else if (nextField.getEntity() instanceof Wall) {\r\n                                    Wall w = (Wall) nextField.getEntity();\r\n                                    if (w.getIntValue() > 1000 && w.getIntValue() <= 2000) {\r\n                                        game.getHolderGrid().get(w.getPos()).clearField();\r\n                                    }\r\n                                }\r\n                                if (isVisible) {\r\n                                    // Remove bullet from field\r\n                                    currentField.clearField();\r\n                                }\r\n                                trackActiveBullets[bullet.getBulletId()] = 0;\r\n                                tank.setNumberOfBullets(tank.getNumberOfBullets() - 1);\r\n                                cancel();\r\n\r\n                            } else {\r\n                                if (isVisible) {\r\n                                    // Remove bullet from field\r\n                                    currentField.clearField();\r\n                                }\r\n\r\n                                nextField.setFieldEntity(bullet);\r\n                                bullet.setParent(nextField);\r\n                            }\r\n                        }\r\n                    }\r\n                }, 0, BULLET_PERIOD);\r\n\r\n                return true;\r\n            } else { // Soldier fire\r\n                Soldier soldier = game.getSoldiers().get(tankId);\r\n                if (soldier.getNumberOfBullets() >= soldier.getAllowedNumberOfBullets())\r\n                    return false;\r\n\r\n                long millis = System.currentTimeMillis();\r\n                if (millis < soldier.getLastFireTime()/*>tank.getAllowedFireInterval()*/) {\r\n                    return false;\r\n                }\r\n\r\n                //Log.i(TAG, \"Cannot find user with id: \" + tankId);\r\n                Direction direction = soldier.getDirection();\r\n                FieldHolder parent = soldier.getParent();\r\n                soldier.setNumberOfBullets(soldier.getNumberOfBullets() + 1);\r\n\r\n                if (!(bulletType >= 1 && bulletType <= 3)) {\r\n                    System.out.println(\"Bullet type must be 1, 2 or 3, set to 1 by default.\");\r\n                    bulletType = 1;\r\n                }\r\n\r\n                soldier.setLastFireTime(millis + bulletDelay[bulletType - 1]);\r\n\r\n                int bulletId = 0;\r\n                if (trackActiveBullets[0] == 0) {\r\n                    bulletId = 0;\r\n                    trackActiveBullets[0] = 1;\r\n                } else if (trackActiveBullets[1] == 0) {\r\n                    bulletId = 1;\r\n                    trackActiveBullets[1] = 1;\r\n                }\r\n\r\n                // Create a new bullet to fire\r\n                final Bullet bullet = new Bullet(tankId, direction, 5);\r\n                // Set the same parent for the bullet.\r\n                // This should be only a one way reference.\r\n                bullet.setParent(parent);\r\n                bullet.setBulletId(bulletId);\r\n\r\n                // TODO make it nicer\r\n                timer.schedule(new TimerTask() {\r\n\r\n                    @Override\r\n                    public void run() {\r\n                        synchronized (monitor) {\r\n                            System.out.println(\"Soldier Active Bullet: \" + soldier.getNumberOfBullets() + \"---- Bullet ID: \" + bullet.getIntValue());\r\n                            FieldHolder currentField = bullet.getParent();\r\n                            Direction direction = bullet.getDirection();\r\n                            FieldHolder nextField = currentField\r\n                                    .getNeighbor(direction);\r\n\r\n                            // Is the bullet visible on the field?\r\n                            boolean isVisible = currentField.isPresent()\r\n                                    && (currentField.getEntity() == bullet);\r\n\r\n\r\n                            if (nextField.isPresent()) {\r\n                                // Something is there, hit it\r\n                                nextField.getEntity().hit(bullet.getDamage());\r\n\r\n                                if (nextField.getEntity() instanceof Tank) { // Tank Hit\r\n                                    Tank t = (Tank) nextField.getEntity();\r\n                                    System.out.println(\"tank is hit, tank life: \" + t.getLife());\r\n                                    if (t.getLife() <= 0) {\r\n                                        t.getParent().clearField();\r\n                                        t.setParent(null);\r\n                                        game.removeTank(t.getId());\r\n                                    }\r\n                                } else if (nextField.getEntity() instanceof Soldier) { // Soldier Hit\r\n                                    Soldier s = (Soldier) nextField.getEntity();\r\n                                    System.out.println(\"soldier is hit, soldier life: \" + s.getLife());\r\n                                    if (s.getLife() <= 0) {\r\n                                        s.getParent().clearField();\r\n                                        s.setParent(null);\r\n                                        game.removeSoldier(s.getId());\r\n                                        tank.setIsActive(0);\r\n                                    }\r\n                                } else if (nextField.getEntity() instanceof Wall) {\r\n                                    Wall w = (Wall) nextField.getEntity();\r\n                                    if (w.getIntValue() > 1000 && w.getIntValue() <= 2000) {\r\n                                        game.getHolderGrid().get(w.getPos()).clearField();\r\n                                    }\r\n                                }\r\n                                if (isVisible) {\r\n                                    // Remove bullet from field\r\n                                    currentField.clearField();\r\n                                }\r\n                                trackActiveBullets[bullet.getBulletId()] = 0;\r\n                                soldier.setNumberOfBullets(soldier.getNumberOfBullets() - 1);\r\n                                cancel();\r\n\r\n                            } else {\r\n                                if (isVisible) {\r\n                                    // Remove bullet from field\r\n                                    currentField.clearField();\r\n                                }\r\n\r\n                                nextField.setFieldEntity(bullet);\r\n                                bullet.setParent(nextField);\r\n                            }\r\n                        }\r\n                    }\r\n                }, 0, BULLET_PERIOD);\r\n\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    public void updateLife(long tankId, int newLife) {\r\n        // Find the tank with tankId and update its life\r\n        Tank tank = game.getTanks().get(tankId);\r\n        if (tank != null) {\r\n            tank.setLife(newLife);\r\n            // Add any additional logic needed, e.g., notifying other players\r\n        }\r\n    }\r\n\r\n    public int getHealth(long tankId) {\r\n        Tank tank = game.getTanks().get(tankId);\r\n        if(tank != null) {\r\n            return tank.getLife();\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/Action.java b/server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/Action.java
--- a/server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/Action.java	(revision c3706688914e5f5c4304d8969304341770b4e6f9)
+++ b/server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/Action.java	(date 1700110729374)
@@ -20,7 +20,10 @@
 import edu.unh.cs.cs619.bulletzone.model.Soldier;
 import edu.unh.cs.cs619.bulletzone.model.Tank;
 import edu.unh.cs.cs619.bulletzone.model.TankDoesNotExistException;
+import edu.unh.cs.cs619.bulletzone.model.Thingamajig;
 import edu.unh.cs.cs619.bulletzone.model.Wall;
+import edu.unh.cs.cs619.bulletzone.model.applePowerUp;
+import edu.unh.cs.cs619.bulletzone.model.nukePowerUp;
 
 /*
     I believe this should ultimately be a command? pattern
@@ -109,6 +112,13 @@
                 throw new TankDoesNotExistException(tankId);
             }
 
+            int powerUpType = tank.getPowerUpType();
+
+            // Adjust the move interval based on the power-up type
+            long allowedMoveInterval = tank.getAllowedMoveInterval();
+            if (powerUpType == 4) {
+                allowedMoveInterval *= 1.5;
+            }
             //if tank direction is not equal to forwards or backwards
             //move constraint
             if (tank.getIsActive() == 1) {
@@ -167,7 +177,8 @@
                 checkNotNull(parent.getNeighbor(direction), "Neightbor is not available");
 
                 boolean isCompleted;
-                if (!nextField.isPresent()|| nextField.getEntity() instanceof Hill || nextField.getEntity() instanceof Rocky) {
+                if (!nextField.isPresent()|| nextField.getEntity() instanceof Hill || nextField.getEntity() instanceof Rocky
+                || nextField.getEntity() instanceof Thingamajig || nextField.getEntity() instanceof applePowerUp || nextField.getEntity() instanceof nukePowerUp) {
                     // If the next field is empty move the user
 
                 /*try {
@@ -438,4 +449,6 @@
         }
         return 0;
     }
+
+
 }
Index: server/src/main/java/edu/unh/cs/cs619/bulletzone/web/GamesController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.unh.cs.cs619.bulletzone.web;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.ExceptionHandler;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestMethod;\r\nimport org.springframework.web.bind.annotation.ResponseBody;\r\nimport org.springframework.web.bind.annotation.ResponseStatus;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport org.springframework.web.client.RestClientException;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\n\r\n\r\nimport edu.unh.cs.cs619.bulletzone.model.Direction;\r\nimport edu.unh.cs.cs619.bulletzone.model.IllegalTransitionException;\r\nimport edu.unh.cs.cs619.bulletzone.model.LimitExceededException;\r\nimport edu.unh.cs.cs619.bulletzone.model.Tank;\r\nimport edu.unh.cs.cs619.bulletzone.model.TankDoesNotExistException;\r\nimport edu.unh.cs.cs619.bulletzone.repository.GameRepository;\r\nimport edu.unh.cs.cs619.bulletzone.util.BooleanWrapper;\r\nimport edu.unh.cs.cs619.bulletzone.util.GridWrapper;\r\nimport edu.unh.cs.cs619.bulletzone.util.LongWrapper;\r\n\r\n@RestController\r\n@RequestMapping(value = \"/games\")\r\nclass GamesController {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(GamesController.class);\r\n\r\n    private final GameRepository gameRepository;\r\n\r\n    @Autowired\r\n    public GamesController(GameRepository gameRepository) {\r\n        this.gameRepository = gameRepository;\r\n    }\r\n\r\n    @RequestMapping(method = RequestMethod.POST, value = \"\", produces = MediaType.APPLICATION_JSON_VALUE)\r\n    @ResponseStatus(HttpStatus.CREATED)\r\n    @ResponseBody\r\n    ResponseEntity<LongWrapper> join(HttpServletRequest request) {\r\n        Tank tank;\r\n        try {\r\n            tank = gameRepository.join(request.getRemoteAddr());\r\n            log.info(\"Player joined: tankId={} IP={}\", tank.getId(), request.getRemoteAddr());\r\n\r\n            return new ResponseEntity<LongWrapper>(\r\n                    new LongWrapper(tank.getId()),\r\n                    HttpStatus.CREATED\r\n            );\r\n        } catch (RestClientException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @RequestMapping(method = RequestMethod.GET, value = \"\", produces = MediaType.APPLICATION_JSON_VALUE)\r\n    @ResponseStatus(HttpStatus.OK)\r\n    public\r\n    @ResponseBody\r\n    ResponseEntity<GridWrapper> grid() {\r\n        return new ResponseEntity<GridWrapper>(new GridWrapper(gameRepository.getGrid()), HttpStatus.OK);\r\n    }\r\n\r\n//    @RequestMapping(method = RequestMethod.GET, value = \"\", produces = MediaType.APPLICATION_JSON_VALUE)\r\n//    @ResponseStatus(HttpStatus.OK)\r\n//    public\r\n//    @ResponseBody\r\n//    ResponseEntity<GridEventListWrapper> event(Timestamp timestamp) {\r\n//        return new ResponseEntity<GridEventListWrapper>(new GridEventListWrapper(gameRepository.getHistory(timestamp)), HttpStatus.OK);\r\n//    }\r\n\r\n    @RequestMapping(method = RequestMethod.PUT, value = \"{tankId}/turn/{direction}\", produces = MediaType.APPLICATION_JSON_VALUE)\r\n    @ResponseStatus(HttpStatus.OK)\r\n    ResponseEntity<BooleanWrapper> turn(@PathVariable long tankId, @PathVariable byte direction)\r\n            throws TankDoesNotExistException, LimitExceededException, IllegalTransitionException {\r\n        return new ResponseEntity<BooleanWrapper>(\r\n                new BooleanWrapper(gameRepository.turn(tankId, Direction.fromByte(direction))),\r\n                HttpStatus.OK\r\n        );\r\n    }\r\n\r\n    @RequestMapping(method = RequestMethod.PUT, value = \"{tankId}/move/{direction}\", produces = MediaType.APPLICATION_JSON_VALUE)\r\n    @ResponseStatus(HttpStatus.OK)\r\n    ResponseEntity<BooleanWrapper> move(@PathVariable long tankId, @PathVariable byte direction)\r\n            throws TankDoesNotExistException, LimitExceededException, IllegalTransitionException {\r\n        return new ResponseEntity<BooleanWrapper>(\r\n                new BooleanWrapper(gameRepository.move(tankId, Direction.fromByte(direction))),\r\n                HttpStatus.OK\r\n        );\r\n    }\r\n\r\n    @RequestMapping(method = RequestMethod.PUT, value = \"{tankId}/fire\", produces = MediaType.APPLICATION_JSON_VALUE)\r\n    @ResponseStatus(HttpStatus.OK)\r\n    ResponseEntity<BooleanWrapper> fire(@PathVariable long tankId)\r\n            throws TankDoesNotExistException, LimitExceededException {\r\n        try {\r\n            return new ResponseEntity<BooleanWrapper>(\r\n                new BooleanWrapper(gameRepository.fire(tankId, 1)),\r\n                HttpStatus.OK\r\n            );\r\n        } catch (IllegalTransitionException e) {\r\n            return new ResponseEntity<BooleanWrapper>(new BooleanWrapper(false), HttpStatus.OK);\r\n        }\r\n    }\r\n\r\n    @RequestMapping(method = RequestMethod.PUT, value = \"{tankId}/fire/{bulletType}\", produces = MediaType.APPLICATION_JSON_VALUE)\r\n    @ResponseStatus(HttpStatus.OK)\r\n    ResponseEntity<BooleanWrapper> fire(@PathVariable long tankId, @PathVariable int bulletType)\r\n            throws TankDoesNotExistException, LimitExceededException {\r\n        try {\r\n            return new ResponseEntity<BooleanWrapper>(\r\n                    new BooleanWrapper(gameRepository.fire(tankId, bulletType)),\r\n                    HttpStatus.OK\r\n            );\r\n        } catch (IllegalTransitionException e) {\r\n            return new ResponseEntity<BooleanWrapper>(new BooleanWrapper(false), HttpStatus.OK);\r\n        }\r\n    }\r\n\r\n    @RequestMapping(method = RequestMethod.DELETE, value = \"{tankId}/leave\", produces = MediaType.APPLICATION_JSON_VALUE)\r\n    @ResponseStatus(HttpStatus.OK)\r\n    HttpStatus leave(@PathVariable long tankId)\r\n            throws TankDoesNotExistException {\r\n        //System.out.println(\"Games Controller leave() called, tank ID: \"+tankId);\r\n        gameRepository.leave(tankId);\r\n        return HttpStatus.OK;\r\n    }\r\n\r\n    @ExceptionHandler(IllegalArgumentException.class)\r\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\r\n    String handleBadRequests(Exception e) {\r\n        return e.getMessage();\r\n    }\r\n\r\n    @RequestMapping(method = RequestMethod.POST, value = \"/soldier/{tankId}\", produces = MediaType.APPLICATION_JSON_VALUE)\r\n    @ResponseStatus(HttpStatus.CREATED)\r\n    @ResponseBody\r\n    ResponseEntity<LongWrapper> deploySoldier(@PathVariable long tankId) {\r\n        LongWrapper soldierId = gameRepository.deploySoldier(tankId);\r\n        return new ResponseEntity<LongWrapper>(\r\n                new LongWrapper(soldierId.getResult()),\r\n                HttpStatus.CREATED\r\n        );\r\n    }\r\n\r\n    @RequestMapping(method = RequestMethod.POST, value = \"{tankId}/updateLife\", produces = MediaType.APPLICATION_JSON_VALUE)\r\n    @ResponseStatus(HttpStatus.OK)\r\n    public void updateLife(@PathVariable long tankId, int newLife) throws IllegalTransitionException, LimitExceededException, TankDoesNotExistException {\r\n        // Find the tank with tankId and update its life\r\n       gameRepository.updateLife(tankId, newLife);\r\n    }\r\n\r\n    @RequestMapping(method = RequestMethod.GET, value = \"{tankId}/getHealth\", produces = MediaType.APPLICATION_JSON_VALUE)\r\n    @ResponseStatus(HttpStatus.OK)\r\n    public @ResponseBody ResponseEntity<Long> getHealth(@PathVariable long tankId) {\r\n        try {\r\n            int health = gameRepository.getHealth(tankId);\r\n            return new ResponseEntity<>((long) health, HttpStatus.OK);\r\n        } catch (Exception e) {\r\n            // Handle exceptions if necessary\r\n            return new ResponseEntity<>(0L, HttpStatus.INTERNAL_SERVER_ERROR);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/edu/unh/cs/cs619/bulletzone/web/GamesController.java b/server/src/main/java/edu/unh/cs/cs619/bulletzone/web/GamesController.java
--- a/server/src/main/java/edu/unh/cs/cs619/bulletzone/web/GamesController.java	(revision c3706688914e5f5c4304d8969304341770b4e6f9)
+++ b/server/src/main/java/edu/unh/cs/cs619/bulletzone/web/GamesController.java	(date 1700087417369)
@@ -8,6 +8,7 @@
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.ExceptionHandler;
 import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.ResponseBody;
@@ -168,4 +169,23 @@
             return new ResponseEntity<>(0L, HttpStatus.INTERNAL_SERVER_ERROR);
         }
     }
+
+
+    @PostMapping(value = "{tankId}/setPowerup/{powerupValue}", produces = MediaType.APPLICATION_JSON_VALUE)
+    @ResponseStatus(HttpStatus.OK)
+    ResponseEntity<BooleanWrapper> setTankPowerup(@PathVariable long tankId, @PathVariable int powerupValue) {
+        try {
+            // Call the method to set the tank's powerup
+            gameRepository.setTankPowerup(tankId, powerupValue);
+
+            return new ResponseEntity<>(
+                    new BooleanWrapper(true),
+                    HttpStatus.OK
+            );
+        } catch (Exception e) {
+            // Handle exceptions if necessary
+            return new ResponseEntity<>(new BooleanWrapper(false), HttpStatus.INTERNAL_SERVER_ERROR);
+        }
+    }
+
 }
Index: server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/DataRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.unh.cs.cs619.bulletzone.repository;\r\n\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport java.util.Random;\r\nimport java.util.Timer;\r\nimport java.util.TimerTask;\r\nimport java.util.concurrent.atomic.AtomicLong;\r\n\r\nimport edu.unh.cs.cs619.bulletzone.datalayer.BulletZoneData;\r\nimport edu.unh.cs.cs619.bulletzone.datalayer.user.GameUser;\r\nimport edu.unh.cs.cs619.bulletzone.model.Bullet;\r\nimport edu.unh.cs.cs619.bulletzone.model.Direction;\r\nimport edu.unh.cs.cs619.bulletzone.model.FieldHolder;\r\nimport edu.unh.cs.cs619.bulletzone.model.Game;\r\nimport edu.unh.cs.cs619.bulletzone.model.IllegalTransitionException;\r\nimport edu.unh.cs.cs619.bulletzone.model.LimitExceededException;\r\nimport edu.unh.cs.cs619.bulletzone.model.Tank;\r\nimport edu.unh.cs.cs619.bulletzone.model.TankDoesNotExistException;\r\nimport edu.unh.cs.cs619.bulletzone.model.Wall;\r\n\r\nimport static com.google.common.base.Preconditions.checkNotNull;\r\n\r\n/**\r\n * This class provides tailored access to objects that are needed by the REST API/Controller\r\n * classes. The idea is that it will interface with a BulletZoneData instance as well as\r\n * any other objects it needs to answer requests having to do with users, items, accounts,\r\n * permissions, and other things that are related to what is stored in the database.\r\n *\r\n * The convention is that actual objects will be returned by the DataRepository so that internal\r\n * objects can make effective use of the results as well as the Controllers. This means that\r\n * all API/Controller classes will need to translate these objects into the strings they need\r\n * to communicate information back to the caller.\r\n */\r\n//Note that the @Component annotation below causes an instance of a DataRepository to be\r\n//created and used for the Controller classes in the \"web\" package.\r\n@Component\r\npublic class DataRepository {\r\n    private BulletZoneData bzdata;\r\n\r\n    DataRepository() {\r\n        //TODO: Replace database name, username, and password with what's appropriate for your group\r\n        String url = \"jdbc:mysql://stman1.cs.unh.edu:3306/cs61907\";\r\n        String username = \"rhea\";\r\n        String password = \"Dgebr3Vern6f\";\r\n//\r\n//        bzdata = new BulletZoneData(url, username, password);\r\n        bzdata = new BulletZoneData(); //just use in-memory database\r\n    }\r\n\r\n    /**\r\n     * Stub for a method that would create a user or validate the user. [You don't have\r\n     * to do it this way--feel free to make other methods if you like!]\r\n     * @param username Username for the user to create or validate\r\n     * @param password Password for the user\r\n     * @param create true if the user should be created, or false otherwise\r\n     * @return GameUser corresponding to the username/password if successful, null otherwise\r\n     */\r\n    public GameUser validateUser(String username, String password, boolean create) {\r\n        //TODO: something that invokes users.createUser(name, password) or\r\n        //      users.validateLogin(name, password) as appropriate, maybe does other bookkeeping\r\n\r\n        GameUser x = bzdata.users.createUser(username, username, password);\r\n\r\n        if(x == null) {\r\n            x = bzdata.users.validateLogin(username,password);\r\n        }\r\n\r\n        return x;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/DataRepository.java b/server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/DataRepository.java
--- a/server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/DataRepository.java	(revision c3706688914e5f5c4304d8969304341770b4e6f9)
+++ b/server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/DataRepository.java	(date 1700109661156)
@@ -7,6 +7,8 @@
 import java.util.TimerTask;
 import java.util.concurrent.atomic.AtomicLong;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import edu.unh.cs.cs619.bulletzone.datalayer.BulletZoneData;
 import edu.unh.cs.cs619.bulletzone.datalayer.user.GameUser;
 import edu.unh.cs.cs619.bulletzone.model.Bullet;
@@ -48,6 +50,10 @@
         bzdata = new BulletZoneData(); //just use in-memory database
     }
 
+    public BulletZoneData getBzdata() {
+        return this.bzdata;
+    }
+
     /**
      * Stub for a method that would create a user or validate the user. [You don't have
      * to do it this way--feel free to make other methods if you like!]
Index: server/src/main/java/edu/unh/cs/cs619/bulletzone/web/AccountController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.unh.cs.cs619.bulletzone.web;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestMethod;\r\nimport org.springframework.web.bind.annotation.ResponseBody;\r\nimport org.springframework.web.bind.annotation.ResponseStatus;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport edu.unh.cs.cs619.bulletzone.datalayer.user.GameUser;\r\nimport edu.unh.cs.cs619.bulletzone.repository.DataRepository;\r\nimport edu.unh.cs.cs619.bulletzone.util.BooleanWrapper;\r\nimport edu.unh.cs.cs619.bulletzone.util.LongWrapper;\r\n\r\n@RestController\r\n@RequestMapping(value = \"/games/account\")\r\npublic class AccountController {\r\n    private static final Logger log = LoggerFactory.getLogger(AccountController.class);\r\n\r\n    private final DataRepository data;\r\n\r\n    @Autowired\r\n    public AccountController(DataRepository repo) {\r\n        this.data = repo;\r\n    }\r\n\r\n    /**\r\n     * Handles a PUT request to register a new user account\r\n     *\r\n     * @param name The username\r\n     * @param password The password\r\n     * @return a response w/ success boolean\r\n     */\r\n    @RequestMapping(method = RequestMethod.PUT, value = \"register/{name}/{password}\", produces = MediaType.APPLICATION_JSON_VALUE)\r\n    @ResponseStatus(HttpStatus.CREATED)\r\n    @ResponseBody\r\n    public ResponseEntity<BooleanWrapper> register(@PathVariable String name, @PathVariable String password)\r\n    {\r\n        // Log the request\r\n        log.debug(\"Register '\" + name + \"' with password '\" + password + \"'\");\r\n        // Return the response (true if account created)\r\n        boolean res = true;\r\n        if((data.validateUser(name, password, true)) == null) {\r\n            log.debug(\"MADE IT TO IF STATEMENT\");\r\n\r\n            res = false;\r\n\r\n        }\r\n        log.debug(\"I AM RETURNING THIS \" + res);\r\n        return new ResponseEntity<BooleanWrapper>(new BooleanWrapper(\r\n                //TODO: something that invokes users.createUser(name, password) and does\r\n                     // other setup in the DataRepository (actually calls data.validateUser(...))\r\n                 res\r\n                ),\r\n                HttpStatus.CREATED);\r\n    }\r\n\r\n    /**\r\n     * Handles a PUT request to login a user\r\n     *\r\n     * @param name The username\r\n     * @param password The password\r\n     * @return a response w/ the user ID (or -1 if invalid)\r\n     */\r\n    @RequestMapping(method = RequestMethod.PUT, value = \"login/{name}/{password}\", produces = MediaType.APPLICATION_JSON_VALUE)\r\n    @ResponseStatus(HttpStatus.OK)\r\n    @ResponseBody\r\n    public ResponseEntity<LongWrapper> login(@PathVariable String name, @PathVariable String password)\r\n    {\r\n        // Log the request\r\n        log.debug(\"Login '\" + name + \"' with password '\" + password + \"'\");\r\n\r\n        GameUser user = data.validateUser(name, password, true);\r\n\r\n\r\n        if (user != null) {\r\n            // Return the response with the user's ID if login is valid\r\n            return new ResponseEntity<>(new LongWrapper(user.getId()), HttpStatus.OK);\r\n        } else {\r\n            // Return a response indicating that the login is not valid (e.g., -1 or another error code)\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/edu/unh/cs/cs619/bulletzone/web/AccountController.java b/server/src/main/java/edu/unh/cs/cs619/bulletzone/web/AccountController.java
--- a/server/src/main/java/edu/unh/cs/cs619/bulletzone/web/AccountController.java	(revision c3706688914e5f5c4304d8969304341770b4e6f9)
+++ b/server/src/main/java/edu/unh/cs/cs619/bulletzone/web/AccountController.java	(date 1700109035034)
@@ -13,6 +13,9 @@
 import org.springframework.web.bind.annotation.ResponseStatus;
 import org.springframework.web.bind.annotation.RestController;
 
+import java.util.Collection;
+
+import edu.unh.cs.cs619.bulletzone.datalayer.account.BankAccount;
 import edu.unh.cs.cs619.bulletzone.datalayer.user.GameUser;
 import edu.unh.cs.cs619.bulletzone.repository.DataRepository;
 import edu.unh.cs.cs619.bulletzone.util.BooleanWrapper;
@@ -76,17 +79,100 @@
         // Log the request
         log.debug("Login '" + name + "' with password '" + password + "'");
 
+
         GameUser user = data.validateUser(name, password, true);
 
-
         if (user != null) {
             // Return the response with the user's ID if login is valid
-            return new ResponseEntity<>(new LongWrapper(user.getId()), HttpStatus.OK);
+            LongWrapper response = new LongWrapper(user.getId());
+            return new ResponseEntity<>(response, HttpStatus.OK);
         } else {
             // Return a response indicating that the login is not valid (e.g., -1 or another error code)
-            return null;
+            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
         }
+
+    }
+
+    /**
+     * Handles a POST request to modify the balance for a user
+     *
+     * @param userId The user ID
+     * @param amount The amount to modify the balance by
+     * @return a response w/ success boolean
+     */
+    @RequestMapping(method = RequestMethod.POST, value = "modifyBalance/{userId}/{amount}", produces = MediaType.APPLICATION_JSON_VALUE)
+    @ResponseStatus(HttpStatus.OK)
+    @ResponseBody
+    public ResponseEntity<BooleanWrapper> modifyBalance(@PathVariable long userId, @PathVariable int amount) {
+        // Log the request
+        log.debug("Modify balance for user ID '" + userId + "' by amount '" + amount + "'");
+
+        // Get the user by ID
+        GameUser user =  data.getBzdata().users.getUser((int)userId);
+
+        Collection<BankAccount> ownedAccounts = user.getOwnedAccounts();
+        boolean balance = false;
+        for (BankAccount account : ownedAccounts) {
+            // Access account properties or perform operations
+            balance = account.modifyBalance(amount);
+            // ... other operations with the bank account
+        }
+
+
+        if (user != null) {
+            // Modify the balance
+            // Return the response with success (true) since balance modification was successful
+            return new ResponseEntity<BooleanWrapper>(new BooleanWrapper(balance), HttpStatus.OK);
+        } else {
+            // Return a response indicating that the user with the provided ID was not found
+            return new ResponseEntity<BooleanWrapper>(new BooleanWrapper(balance), HttpStatus.NOT_FOUND);
+        }
+    }
+
+
+    /**
+     * Handles a GET request to retrieve the balance for a user
+     *
+     * @param userId The user ID
+     * @return a response w/ the user's balance
+     */
+    @RequestMapping(method = RequestMethod.GET, value = "/getBalance/{userId}", produces = MediaType.APPLICATION_JSON_VALUE)
+    @ResponseStatus(HttpStatus.OK)
+    public ResponseEntity<LongWrapper> getBalance(@PathVariable long userId) {
+        // Log the request
+        log.debug("Get balance for user ID '" + userId + "'");
+
+        // Get the user by ID
+        GameUser user = data.getBzdata().users.getUser((int) userId);
+
+        if (user != null) {
+            Collection<BankAccount> ownedAccounts = user.getOwnedAccounts();
+
+            // Initialize balance outside the loop
+            double balance = 0;
+
+            if (!ownedAccounts.isEmpty()) {
+                // Now you can iterate through the owned accounts or perform any other operations
+                for (BankAccount account : ownedAccounts) {
+                    // Access account properties or perform operations
+                    balance = account.getBalance();
+                    // ... other operations with the bank account
+                }
 
+                // Move the response creation inside the loop
+                LongWrapper response = new LongWrapper((long) balance);
+                return new ResponseEntity<>(response, HttpStatus.OK);
+            } else {
+                log.debug("No bank accounts found for user ID: " + userId);
+            }
+        } else {
+            log.debug("User not found for ID: " + userId);
+        }
+
+        // If the user is not found or has no bank accounts, return an error response
+        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
     }
+
+
 
 }
Index: server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/GameRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.unh.cs.cs619.bulletzone.repository;\r\n\r\nimport java.sql.Timestamp;\r\nimport java.util.LinkedList;\r\n\r\nimport edu.unh.cs.cs619.bulletzone.model.Direction;\r\nimport edu.unh.cs.cs619.bulletzone.model.IllegalTransitionException;\r\nimport edu.unh.cs.cs619.bulletzone.model.LimitExceededException;\r\nimport edu.unh.cs.cs619.bulletzone.model.Tank;\r\nimport edu.unh.cs.cs619.bulletzone.model.TankDoesNotExistException;\r\nimport edu.unh.cs.cs619.bulletzone.util.LongWrapper;\r\n\r\npublic interface GameRepository {\r\n\r\n    Tank join(String ip);\r\n\r\n    int[][] getGrid();\r\n\r\n    boolean turn(long tankId, Direction direction)\r\n            throws TankDoesNotExistException, IllegalTransitionException, LimitExceededException;\r\n\r\n    boolean move(long tankId, Direction direction)\r\n            throws TankDoesNotExistException, IllegalTransitionException, LimitExceededException;\r\n\r\n    boolean fire(long tankId, int strength)\r\n            throws TankDoesNotExistException, LimitExceededException, IllegalTransitionException;\r\n\r\n    public void leave(long tankId)\r\n            throws TankDoesNotExistException;\r\n\r\n    public LinkedList<GridEvent> getHistory(Timestamp timestamp);\r\n\r\n    public LongWrapper deploySoldier(long tankID);\r\n    public void updateLife(long tankId, int newLife) throws IllegalTransitionException, LimitExceededException, TankDoesNotExistException;\r\n\r\n    public int getHealth(long tankId) throws IllegalTransitionException, LimitExceededException, TankDoesNotExistException;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/GameRepository.java b/server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/GameRepository.java
--- a/server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/GameRepository.java	(revision c3706688914e5f5c4304d8969304341770b4e6f9)
+++ b/server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/GameRepository.java	(date 1700087417332)
@@ -34,4 +34,6 @@
     public void updateLife(long tankId, int newLife) throws IllegalTransitionException, LimitExceededException, TankDoesNotExistException;
 
     public int getHealth(long tankId) throws IllegalTransitionException, LimitExceededException, TankDoesNotExistException;
+
+    void setTankPowerup(long tankId, int powerupValue);
 }
